# S tem prikazom lahko probaš tudi npr. transformirati odzivno spr in prikazati še enkrat isto!
scatterplot(FEV ~ Age, regLine = FALSE, smooth = FALSE, boxplots = 'xy',
xlab = c("napovedna_spr (enota)"), ylab = c("odzivna_spr (enota)"),
data = data, pch = 16,
id = list(n = 2, location = "lr")) # id = TRUE
lm(FEV ~ Gender * Age, data = data)
lm(FEV ~ Gender + Age, data = data)
summary(lm(formula = FEV ~ Gender * Age, data = data))
model_gender = lm(FEV ~ Gender, data = data)
# Regresijski osamelci: studentizirani ostanki glede na kvantile 𝑡(SP=𝑛−𝑘−2) in pripadajoča 95 % točkovna ovojnica (QQ grafikon)
qqPlot(model_gender, id = TRUE)
# Za vsako točko posebej preverjamo, ali je regresĳski osamelec. Ničelna domneva pravi, da 𝑖-ta točka ni regresĳski osamelec. Izpiše vse tiste točke, pri katerih je nepopravljena 𝑝-vrednost pod 0.05.
outlierTest(model_gender) # točka je reg osamelec, če je Bonferroni p-vrednost manjša od 0.05
model_age = lm(FEV ~ Age, data = data)
model_op_int = lm(FEV ~ Gender * Age, data = data)
qqPlot(model_age, id = TRUE)
qqPlot(model_op_int, id = TRUE)
outlierTest(model_age) # točka je reg osamelec, če je Bonferroni p-vrednost manjša od 0.05
outlierTest(model_op_int, id = TRUE) # točka je reg osamelec, če je Bonferroni p-vrednost manjša od 0.05
# Da preveriš kako se modelske napovedi razlikujejo od dejanskih točk - regresijski osamelci
data[c(539, 576), ]
fitted(model_gender)[c(cifra1, cifra2)]
fitted(model_gender)[c(539, 576)]
fitted(model_op_int)[c(539, 576)]
log(data$model_op_int[c(539, 576)]) # brez log, če ga ne uporabljaš!
data$model_op_int[c(539, 576)] # brez log, če ga ne uporabljaš!
data$FEV[c(539, 576)] # brez log, če ga ne uporabljaš!
# Vzvodne točke:  Vzvod v odvisnosti od napovedne_spr za model
plot(data$Age, hatvalues(model), pch = 16,
xlab = c("napovedna_spr (enota)"), ylab = c("Vzvod"))
# Vzvodne točke:  Vzvod v odvisnosti od napovedne_spr za model
plot(data$Age, hatvalues(model_op_int), pch = 16,
xlab = c("napovedna_spr (enota)"), ylab = c("Vzvod"))
# Grafični prikaz studentiziranih ostankov, vzvodov in Cookove razdalje (ploščina kroga je sorazmerna Cookovi razdalji) za model
influencePlot(model_op_int,
id = list(method = "noteworthy", n = 2, cex = 1, location = "lr"),
xlab = "Vzvodi", ylab = "Studentizirani ostanki") # n = število točk z največjo vrednostjo studentiziranega ostanka, 𝑎 točk z največjim vzvodom in 𝑎 točk z največjo Cookovo razdaljo (pogosto se točke prekrivajo in jih je v izpisu manj kot 3𝑎)
# Vplivne točke:
vplivne = lm.influence(model_op_int)
names(vplivne)
sort(vplivne$hat, decreasing = TRUE)[1:4] # 4 točke z največjimi vzvodi
vplivne$coeff["specifična_točka",] # spremembi ocen b_0 in b_1, če specifično točko izločimo
View(vplivne)
vplivne$coeff["628",] # spremembi ocen b_0 in b_1, če specifično točko izločimo
sort(vplivne$coeff[,1],decreasing=TRUE)[1:4] # 4 točke z največjo spremembo b_0
sort(vplivne$coeff[,2])[1:4] # 4 točke z največjo spremembo naklona
sort(vplivne$sigma)[1:4] # izpis standardnih napak regresije brez vključenega podatka/točke
subset(data, subset = data$Age != "628")
vplivne$coeff["628",]
names(vplivne)
names(table(vplivne))
table(vplivne)
# Ena napovedna spr
m0 = lm(FEV ~ Gender, data = data)
# Dve napovedni spr
m1 = lm(odzivna_spr ~ Gender + Age, data = data)
# Dve napovedni spr
m1 = lm(FEV ~ Gender + Age, data = data)
# Komponente modela:
names(m0)
# Koeficienti modela
m0$coef
model = lm(FEV ~ Gender * Age, data = data)
modelska_matrika = model.matrix(model.m2)
head(modelska_matrika, n = 3)
modelska_matrika = model.matrix(model)
head(modelska_matrika, n = 3)
# ... nadaljuj z
anova(model)
# Izbira transformacije
symbox(~ FEV, xlab = "Lambda",
ylab = "Transformirane vrednosti za odzivno_spr",
data = data) # Izbereš tisto, kjer je boxplot najbolj simetričen, najbolj podoben ~ N
# Oceni, katera lambda bi bila glede na maximum likelihood primerna
summary(powerTransform(model)) # razlaga spodaj
# Logaritem verjetja v odvisnosti od 𝜆 za model, optimalna vrednost za 𝜆 in njen 95 % IZ
par(mar = c(4, 4, 1, 1))
boxCox(model) # Pazi pri teh transformacijah, včasih ni razložljivo!
# Interpretacija eksponentne zveze:
model_exp = lm(log(FEV) ~ Ht, data = data)
(b = coefficients(model_exp))
exp(b[1]) # Eksponiraj intercept (beta0) → Interpretacija je zdaj lahko: Ob napovedni_spr = 0, je odzivna_spr enaka exp(b[1]).
exp(confint(model_exp)[1,]) # Eksponiraj IZ za intercept
exp(b[2])-1 # Eksponiraj beta1 → interpretacija je zdaj lahko: Če se napovedna_spr spremeni za 1, se odzivna_spr spremeni za exp(b[2])-1 * 100 %.
exp(confint(model_exp)[2,])-1 # Eksponiraj IZ za beta1
summary(model_exp)$r.squared
## 1.1 način
plot(effect(c("Ht"), model_exp,
transformation = list(link = log, inverse = exp)),
axes = list(y = list(lab = "odzivna_spr")), main = "") # Odvisnost odzivne_spr od napovedna_spr in pripadajoča regresijska premica s 95 % IZ za povprečno napoved odzivne_spr, skala za odzivno_spr je logaritemska!!!!
## 1.1 način
plot(effect(c("Ht", "Age"), model_exp,
transformation = list(link = log, inverse = exp)),
axes = list(y = list(lab = "odzivna_spr")), main = "") # Odvisnost odzivne_spr od napovedna_spr in pripadajoča regresijska premica s 95 % IZ za povprečno napoved odzivne_spr, skala za odzivno_spr je logaritemska!!!!
# Interpretacija eksponentne zveze:
model_exp = lm(log(FEV) ~ Ht*Age*Gender*Smoke, data = data)
(b = coefficients(model_exp))
exp(b[1]) # Eksponiraj intercept (beta0) → Interpretacija je zdaj lahko: Ob napovedni_spr = 0, je odzivna_spr enaka exp(b[1]).
exp(confint(model_exp)[1,]) # Eksponiraj IZ za intercept
exp(b[2])-1 # Eksponiraj beta1 → interpretacija je zdaj lahko: Če se napovedna_spr spremeni za 1, se odzivna_spr spremeni za exp(b[2])-1 * 100 %.
exp(confint(model_exp)[2,])-1 # Eksponiraj IZ za beta1
summary(model_exp)$r.squared
## 1.1 način
plot(effect(c("Ht", "Age"), model_exp,
transformation = list(link = log, inverse = exp)),
axes = list(y = list(lab = "odzivna_spr")), main = "") # Odvisnost odzivne_spr od napovedna_spr in pripadajoča regresijska premica s 95 % IZ za povprečno napoved odzivne_spr, skala za odzivno_spr je logaritemska!!!!
## 1.1 način
plot(effect(c("Ht", "Age", "Smoke"), model_exp,
transformation = list(link = log, inverse = exp)),
axes = list(y = list(lab = "odzivna_spr")), main = "") # Odvisnost odzivne_spr od napovedna_spr in pripadajoča regresijska premica s 95 % IZ za povprečno napoved odzivne_spr, skala za odzivno_spr je logaritemska!!!!
## 1.1 način
plot(effect(c("Ht", "Age", "Smoke", "Gender"), model_exp,
transformation = list(link = log, inverse = exp)),
axes = list(y = list(lab = "odzivna_spr")), main = "") # Odvisnost odzivne_spr od napovedna_spr in pripadajoča regresijska premica s 95 % IZ za povprečno napoved odzivne_spr, skala za odzivno_spr je logaritemska!!!!
## 1.2 način
plot(Effect(c("Ht", "Age", "Smoke", "Gender"), model_exp,
transformation = list(link = log,inverse = exp)),
axes = list(y = list(lab = "odzivna_spr (enota)", type = "response")),
multiline=TRUE, ci.style="bands", main="", ylim=c(_, _))
## 1.2 način
plot(Effect(c("Ht", "Age", "Smoke", "Gender"), model_exp,
transformation = list(link = log,inverse = exp)),
axes = list(y = list(lab = "odzivna_spr (enota)", type = "response")),
multiline=TRUE, ci.style="bands", main="")
# Interpretacija eksponentne zveze:
model_exp = lm(log(FEV) ~ Age*Ht*Gender*Smoke, data = data)
## 1.1 način
plot(effect(c("Ht", "Age", "Smoke", "Gender"), model_exp,
transformation = list(link = log, inverse = exp)),
axes = list(y = list(lab = "odzivna_spr")), main = "") # Odvisnost odzivne_spr od napovedna_spr in pripadajoča regresijska premica s 95 % IZ za povprečno napoved odzivne_spr, skala za odzivno_spr je logaritemska!!!!
mod2.int <- lm(log(FEV) ~ Age*Ht*Gender*Smoke, data=lungcap)
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
View(lungcap)
lungcap$Ht <- lungcap$Ht*2.54
lungcap$Smoke <- factor(lungcap$Smoke, labels=c("Ne", "Da"))
levels(lungcap$Gender)
levels(lungcap$Gender) <- c("Ženske", "Moški")
mod2.int <- lm(log(FEV) ~ Age*Ht*Gender*Smoke, data=lungcap)
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
plot(Effect(c("Ht", "Age", "Smoke", "Gender"), model_exp,
transformation = list(link = log,inverse = exp)),
axes = list(y = list(lab = "odzivna_spr (enota)", type = "response")),
multiline=TRUE, ci.style="bands", main="")
## 1.1 način
plot(effect(c("Ht", "Age", "Smoke", "Gender"), model_exp,
transformation = list(link = log, inverse = exp)),
axes = list(y = list(lab = "odzivna_spr")), main = "") # O
plot(Effect(c("Age","Ht","Gender","Smoke"), model_exp, partial.residuals=TRUE), main="")
plot(Effect(c("Age","Ht","Gender","Smoke"), model_exp, partial.residuals=TRUE, transformation = list(link = log,inverse = exp)), main="")
## 1.2 način
plot(Effect(c("Ht", "Age", "Smoke", "Gender"), model_exp,
transformation = list(link = log,inverse = exp)),
axes = list(y = list(lab = "odzivna_spr (enota)", type = "response")),
multiline=TRUE, ci.style="bands", main="")
## 1.2 način
plot(Effect(c("Age", "Ht", "Smoke", "Gender"), model_exp,
transformation = list(link = log,inverse = exp)),
axes = list(y = list(lab = "odzivna_spr (enota)", type = "response")),
multiline=TRUE, ci.style="bands", main="")
plot(Effect(c("Age","Ht","Gender","Smoke"), model_exp, partial.residuals=TRUE, transformation = list(link = log,inverse = exp)), main="")
plot(Effect(c("Age","Ht","Gender","Smoke"), model_exp, partial.residuals=TRUE, transformation = list(link = log,inverse = exp)),
axes = list(y = list(lab = "odzivna_spr (enota)", type = "response")), main="")
plot(Effect(c("Age","Ht","Gender","Smoke"), model_exp, partial.residuals=TRUE, transformation = list(link = log,inverse = exp)), main="", multiline = TRUE)
## 2. način
ggplot(data = data, aes(x = Ht, y = log(FEV))) +
geom_point() + stat_smooth(method = "lm") +
xlab("napovedna_spr (enote!!!)") + ylab("log(odzivna_spr)") # Odvisnost log(odzivna_spr) od napovedna_spr in pripadajoča regresijska premica s 95 % IZ za povprečno napoved log(odzivna_spr)
# Grafični prikazi (de-transformacija) za exp zvezo
ggplot(data = data, aes(x = Ht, y = FEV)) +
geom_point() + xlab("napovedna_spr (enote)") + ylab("odzivna_spr (enote)") +
stat_function(fun = function(Ht) exp(b[1] + b[2] * Ht)) #  Odvisnost odzivna_spr od napovedna_spr; eksponentni model
head(model.matrix(model)) # da preveriš referenčne skupine
tail(model.matrix(model))
# Dodatek regresijske premice na razsevni grafikon
ggplot(data = data, mapping = aes(x = napovedna_spr, y = odzivna_spr)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) + # če daš se=TRUE dobiš 95% IZ za povprečno napoved!!
xlab("napovedna_spr (enote)") + ylab("odzivna_spr (enote)")
# Dodatek regresijske premice na razsevni grafikon
ggplot(data = data, mapping = aes(x = Ht*Gender, y = odzivna_spr)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) + # če daš se=TRUE dobiš 95% IZ za povprečno napoved!!
xlab("napovedna_spr (enote)") + ylab("odzivna_spr (enote)")
# Dodatek regresijske premice na razsevni grafikon
ggplot(data = data, mapping = aes(x = c(Ht, Gender), y = odzivna_spr)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) + # če daš se=TRUE dobiš 95% IZ za povprečno napoved!!
xlab("napovedna_spr (enote)") + ylab("odzivna_spr (enote)")
# Dodatek regresijske premice na razsevni grafikon
ggplot(data = data, mapping = aes(x = c(Ht, Gender), y = FEV)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) + # če daš se=TRUE dobiš 95% IZ za povprečno napoved!!
xlab("napovedna_spr (enote)") + ylab("odzivna_spr (enote)")
# Dodatek regresijske premice na razsevni grafikon
ggplot(data = data, mapping = aes(x = Ht, y = FEV)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) + # če daš se=TRUE dobiš 95% IZ za povprečno napoved!!
xlab("napovedna_spr (enote)") + ylab("odzivna_spr (enote)")
summary(m1)
# Graf dodane spremenljivke
avPlots(m1, ylim = c(0, 200)) # Vpliv vsake od napovednih spr na odzivno spr ob upoštevanju ostalih spr v modelu (= pri konstantni vrednosti ostalih spr) - naklon je enak oceni parametrov za tisto spremenljivko
# Graf dodane spremenljivke
avPlots(m1, ylim = c(0, 3)) # Vpliv vsake od napovednih spr na odzivno spr ob upoštevanju ostalih spr v modelu (= pri konstantni vrednosti ostalih spr) - naklon je enak oceni parametrov za tisto spremenljivko
# Graf dodane spremenljivke
avPlots(m1, ylim = c(-1, 3)) # Vpliv vsake od napovednih spr na odzivno spr ob upoštevanju ostalih spr v modelu (= pri konstantni vrednosti ostalih spr) - naklon je enak oceni parametrov za tisto spremenljivko
# Graf dodane spremenljivke
avPlots(m1, ylim = c(-3, 3)) # Vpliv vsake od napovednih spr na odzivno spr ob upoštevanju ostalih spr v modelu (= pri konstantni vrednosti ostalih spr) - naklon je enak oceni parametrov za tisto spremenljivko
# Graf dodane spremenljivke
avPlots(m1, ylim = c(-3, 5)) # Vpliv vsake od napovednih spr na odzivno spr ob upoštevanju ostalih spr v modelu (= pri konstantni vrednosti ostalih spr) - naklon je enak oceni parametrov za tisto spremenljivko
# Graf parcialnih ostankov
crPlots(m1, ylim = c(-5, 5))# Odvisnosti odzivne spr od posamezne napovedne spr upoštevajoč drugo/-e spr v modelu → BREZ INTERAKCIJ
# Graf parcialnih ostankov
crPlots(model_exp, ylim = c(-5, 5))# Odvisnosti odzivne spr od posamezne napovedne spr upoštevajoč drugo/-e spr v modelu → BREZ INTERAKCIJ
plot(Effect(c("Ht", "Age", "Gender", "Smoke"), model_exp), multiline=TRUE,
ci.style="bands", main="", ylim=c(-10,10)) #  Modelske napovedi za odzivno_spr v odvisnosti od spr1, spr2 in spr3 hkrati, pri povprečni vrendosti spr4 za model → Z INTERAKCIJAMI (iste grafe narišeš pred in po vključitvijo interakcij!!) → glej interakcije
plot(Effect(c("Ht", "Age", "Gender", "Smoke"), model_exp), multiline=TRUE,
ci.style="bands", main="", ylim=c(-5,5)) #  Modelske napovedi za odzivno_spr v odvisnosti od spr1, spr2 in spr3 hkrati, pri povprečni vrendosti spr4 za model → Z INTERAKCIJAMI (iste grafe narišeš pred in po vključitvijo interakcij!!) → glej interakcije
plot(Effect(c("Ht", "Age", "Gender", "Smoke"), model_exp), multiline=TRUE,
ci.style="bands", main="", ylim=c(-3,3)) #  Modelske napovedi za odzivno_spr v odvisnosti od spr1, spr2 in spr3 hkrati, pri povprečni vrendosti spr4 za model → Z INTERAKCIJAMI (iste grafe narišeš pred in po vključitvijo interakcij!!) → glej interakcije
plot(Effect(c("Age", "Ht", "Gender", "Smoke"), model_exp), multiline=TRUE,
ci.style="bands", main="", ylim=c(-3,3)) #  Modelske napovedi za odzivno_spr v odvisnosti od spr1, spr2 in spr3 hkrati, pri povprečni vrendosti spr4 za model → Z INTERAKCIJAMI (iste grafe narišeš pred in po vključitvijo interakcij!!) → glej interakcije
plot(Effect(c("Age", "Ht", "Gender", "Smoke"), model_exp), multiline=FALSE,
ci.style="bands", main="", ylim=c(-3,3)) #  Modelske napovedi za odzivno_spr v odvisnosti od spr1, spr2 in spr3 hkrati, pri povprečni vrendosti spr4 za model → Z INTERAKCIJAMI (iste grafe narišeš pred in po vključitvijo interakcij!!) → glej interakcije
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
plot(Effect(c("Age", "Ht", "Gender", "Smoke"), model_exp), partial.residuals = TRUE, multiline=FALSE,
ci.style="bands", main="", ylim=c(-3,3)) #  Modelske napovedi za odzivno_spr v odvisnosti od spr1, spr2 in spr3 hkrati, pri povprečni vrendosti spr4 za model → Z INTERAKCIJAMI (iste grafe narišeš pred in po vključitvijo interakcij!!) → glej interakcije
library(ggplot2)
library(car)
library(effects)
library(gridExtra)
library(ggpubr)
library(ellipse)
library(dplyr)
library(vtable)
library(reshape)
library(corrplot)
library(knitr)
library(kableExtra)
library(GLMsData)
setwd("C:/Users/UrbanMatjaz/OneDrive - IN516HT D.O.O/Desktop/FAKS/Linearni modeli/git/LinearniModeli")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
data = read.table("diamanti", header=T)
data = read.table("diamanti.txt", header=T)
dim(data) # dimenzije vrstice, stolpci
head(data) # začetek tabele
str(data)
summary(data) # min, max, kvantili, povprečje po spr
data$barva = factor(data$barva, labels = c("Brezbarven", "Skoraj brezbarven", "Rumen"))
hist(data$barva)
hist(data$Cena)
hist(data$cena)
hist(data$cena, main = "Porazdelitev spr. Cena", xlab = "Cena")
hist(data$karat, main = "Porazdelitev spr. karat", xlab = "karat")
library(ggplot2)
library(car)
library(effects)
library(gridExtra)
library(ggpubr)
library(ellipse)
library(dplyr)
library(vtable)
library(reshape)
library(corrplot)
library(knitr)
library(kableExtra)
library(GLMsData)
ggplot(data = data) +
geom_point(mapping = aes(x = karat, y = cena)) +
xlab("Karat (g)") + ylab("Cena (eur)")
ggplot(data = data) +
geom_point(mapping = aes(x = Barva, y = cena)) +
xlab("barva") + ylab("Cena (eur)")
ggplot(data = data) +
geom_point(mapping = aes(x = barva, y = cena)) +
xlab("barva") + ylab("Cena (eur)")
boxplot(data$cena ~ data$barva,
xlab = "barva", ylab = "cena")
model = lm(cena ~ karat + barva, data = data)
plot(model)
par(mfrow = c(2, 2))
plot(model)
model.t = lm(log(cena) ~ karat + barva, data = data)
par(mfrow = c(2, 2))
plot(model.t)
symbox(~ cena, xlab = "Lambda",
ylab = "Transformirane vrednosti za ceno",
data = data)
par(mfrow = c(1, 1))
symbox(~ cena, xlab = "Lambda",
ylab = "Transformirane vrednosti za ceno",
data = data)
summary(powerTransform(model))
model.t = lm(log(cena) ~ log(karat) + barva, data = data)
par(mfrow = c(2, 2))
plot(model.t)
boxCox(model)
par(mfrow = c(1, 1))
boxCox(model)
graf1 = plot(Effect(c("karat", "barva"), model.t, partial.residuals = TRUE),
ci.style = "none", lattice = list(layout = c(4, 1)))
graf2 = plot(Effect(c("barva", "karat"), model.t, partial.residuals = TRUE),
ci.style = "none", lattice = list(layout = c(4, 1)))
grid.arrange(graf1, graf2) # razlaga spodaj
plot(Effect(c("karat", "barva"), model), # lahko isti graf narediš brez/z interakcijo
multiline = TRUE, ci.style = "bands",
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
main = "", lty = c(1:2))
plot(Effect(c("karat", "barva"), model), # lahko isti graf narediš brez/z interakcijo
multiline = FALSE, ci.style = "bands",
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
main = "", lty = c(1:2))
plot(Effect(c("karat", "barva"), model.t), # lahko isti graf narediš brez/z interakcijo
multiline = FALSE, ci.style = "bands",
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
main = "", lty = c(1:2))
plot(Effect(c("karat", "barva"), model), # lahko isti graf narediš brez/z interakcijo
multiline = FALSE, ci.style = "bands",
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
main = "", lty = c(1:2))
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
plot(Effect(c("karat", "barva"), model.t, transformation = list(link = log,inverse = exp)),
multiline = FALSE, ci.style = "bands",
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
main = "", lty = c(1:2))
plot(Effect(c("karat", "barva"), model.t, transformation = list(link = log,inverse = log)),
multiline = FALSE, ci.style = "bands",
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
main = "", lty = c(1:2))
plot(Effect(c("karat", "barva"), model.t, transformation = list(link = log,inverse = exp)),
multiline = FALSE, ci.style = "bands",
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
main = "", lty = c(1:2))
plot(Effect(c("karat", "barva"), model, transformation = list(link = log,inverse = exp)),
multiline = FALSE, ci.style = "bands",
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
main = "", lty = c(1:2))
plot(Effect(c("karat", "barva"), model),
multiline = FALSE, ci.style = "bands",
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
main = "", lty = c(1:2))
model.t = lm(log(cena) ~ karat + barva, data = data)
plot(Effect(c("karat", "barva"), model),
multiline = FALSE, ci.style = "bands",
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
main = "", lty = c(1:2))
# podatke najdemo v paketu MASS v podatkovnem okviru mammals
library(MASS)
data(mammals)
summary(mammals)
scatterplot(brain ~ body, regLine = FALSE, smooth = FALSE,
id = list(method = 'mahal', n = 3), boxplots = 'xy',
xlab = "Masa telesa (kg)",
ylab = "Masa možganov (g)", pch = 16, data = mammals)
scatterplot(log10(brain) ~ log10(body), regLine = FALSE,
smooth = list(span = 0.5, spread = FALSE),
id = list(method = 'mahal', n = 3), boxplots = 'xy',
xlab = "log10(body)", ylab = "log10(brain)", pch = 16,
data = mammals)
plot(model.t)
model.t = lm(log(cena) ~ karat + barva, data = data)
par(mfrow = c(2, 2))
plot(model.t)
plot(Effect(c("karat", "barva"), model.t),
multiline = FALSE, ci.style = "bands",
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
main = "", lty = c(1:2))
plot(model.t)
plot(Effect(c("karat", "barva"), model.t, partial.residuals = TRUE),
multiline = FALSE, ci.style = "bands",
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
main = "", lty = c(1:2))
plot(Effect(c("karat", "barva"), model, partial.residuals = TRUE),
multiline = FALSE, ci.style = "bands",
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
main = "", lty = c(1:2))
model.t = lm(log(cena) ~ log(karat) + barva, data = data)
plot(Effect(c("karat", "barva"), model.t, partial.residuals = TRUE),
multiline = FALSE, ci.style = "bands",
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
main = "", lty = c(1:2))
avPlots(model.t, id = list(location = "avoid"))
model.t.int = lm(log(cena) ~ log(karat) * barva, data = data)
anova(model.t.int)
qqPlot(model.t.int, id = TRUE)
par(mfrow = c(1, 1))
qqPlot(model.t.int, id = TRUE)
outlierTest(model.t.int)
View(data)
dim(na.omit(data))
outlierTest(model)
outlierTest(model.t)
outlierTest(model.t.int)
influencePlot(model.t.int,
id = list(method = "noteworthy", n = 2, cex = 1, location = "lr"),
xlab = "Vzvodi", ylab = "Studentizirani ostanki")
outlierTest(model.t.int)
plot(data$karat, hatvalues(model.t.int), pch = 16,
xlab = c("napovedna_spr (enota)"), ylab = c("Vzvod"))
influencePlot(model.t.int,
id = list(method = "noteworthy", n = 2, cex = 1, location = "lr"),
xlab = "Vzvodi", ylab = "Studentizirani ostanki")
summary(model.t.int)
confint(model.t.int)
(b <- coefficients(model.t.int))
exp(b[1])
exp(confint(model.t.int)[1,])
exp(b[2])-1
# za vsak km stran od cinkarne v povprečju vsebnost svinca pade za 20%
exp(confint(model.Pb)[2,])-1
# za vsak km stran od cinkarne v povprečju vsebnost svinca pade za 20%
exp(confint(model.t.int)[2,])-1
summary(model.t.int)
confint(model.t.int)
coefficients(model.t.int)
exp(b[3])
exp(confint(model.t.int)[2,])-1
exp(b[2])-1
setwd("C:/Users/UrbanMatjaz/OneDrive - IN516HT D.O.O/Desktop/FAKS/Linearni modeli/git/LinearniModeli/2024_25")
kovine0<-read.table("KOVINE.txt", header=TRUE, sep="\t")
kovine0$razdalja<-kovine0$razdalja.m/1000
# izločimo vzorčne točke z oddaljenostjo več kot 10 km
kovine<-kovine0[kovine0$razdalja<10,]
dim(kovine)
summary(kovine[,c("Pb","razdalja")])
scatterplot(Pb~razdalja, regLine=F, xlab="Razdalja (km)",
ylab="Pb (mg/kg)", smooth=list(span=0.5, spread=FALSE),
boxplots='xy', data=kovine, pch=16)
scatterplot(log(Pb)~razdalja, regLine=F, smooth=list(span=0.5, spread=FALSE),
xlab="Razdalja (km)", ylab="log(Pb)",
boxplots='xy', data=kovine, pch=16)
model.Pb <- lm(log(Pb)~razdalja, data=kovine)
par(mfrow = c(2, 2),  oma = c(0, 0, 2, 0))
plot(model.Pb)
# za vsak km stran od cinkarne v povprečju vsebnost svinca pade za 20%
exp(confint(model.Pb)[2,])-1
setwd("C:/Users/UrbanMatjaz/OneDrive - IN516HT D.O.O/Desktop/FAKS/Linearni modeli/git/LinearniModeli")
(b <- coefficients(model.t.int))
exp(confint(model.t.int)[2,])-1
setwd("C:/Users/UrbanMatjaz/OneDrive - IN516HT D.O.O/Desktop/FAKS/Linearni modeli/git/LinearniModeli/2024_25")
plot(Effect(c("razdalja"), model.Pb), ci.style = "bands", main = "",
xlab = "Razdalja (km)", ylab = "log(Pb)")
plot(Effect(c("razdalja"), model.Pb,
transformation = list(link = log, inverse = exp)),
axes = list(y = list(lab = "Pb (mg/kg)", type = "response")),
ci.style = "bands", main = "", xlab = "Razdalja (km)")
setwd("C:/Users/UrbanMatjaz/OneDrive - IN516HT D.O.O/Desktop/FAKS/Linearni modeli/git/LinearniModeli")
exp(confint(model.t.int)[2,])-1
exp(b[2])-1
scatterplot(brain ~ body, regLine = FALSE, smooth = FALSE,
id = list(method = 'mahal', n = 3), boxplots = 'xy',
xlab = "Masa telesa (kg)",
ylab = "Masa možganov (g)", pch = 16, data = mammals)
exp(b[2])-1
exp(confint(model.t.int)[2,])-1
exp(b[3])-1
exp(confint(model.t.int)[2,])-1
exp(confint(model.t.int)[3,])-1
plot(Effect(c("karat", "barva"), model.t, partial.residuals = TRUE),
multiline = FALSE, ci.style = "bands",
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
main = "", lty = c(1:2))
avPlots(model.t, id = list(location = "avoid"))
plot(Effect(c("karat", "barva"), model.t, partial.residuals = TRUE),
multiline = FALSE, ci.style = "bands",
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
main = "", lty = c(1:2))
plot(Effect(c("log(karat)", "barva"), model.t, partial.residuals = TRUE),
multiline = FALSE, ci.style = "bands",
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
main = "", lty = c(1:2))
model.t = lm(log10(cena) ~ log10(karat) + barva, data = data)
par(mfrow = c(2, 2))
plot(model.t)
model.t.int = lm(log10(cena) ~ log10(karat) * barva, data = data)
anova(model.t.int)
par(mfrow = c(1, 1))
qqPlot(model.t.int, id = TRUE)
outlierTest(model.t.int)
influencePlot(model.t.int,
id = list(method = "noteworthy", n = 2, cex = 1, location = "lr"),
xlab = "Vzvodi", ylab = "Studentizirani ostanki")
plot(Effect(c("karat", "barva"), model.t, partial.residuals = TRUE),
multiline = FALSE, ci.style = "bands",
key.args = list(x = 0.05, y = 0.8, corner = c(0, 0)),
main = "", lty = c(1:2))
summary(model.t.int)
exp(b[2])-1 * 100
exp(b[3])-1
View(data)
exp(confint(model.t.int)[3,])-1
plot(Effect(c("z.nv", "x"), model.m2, partial.residuals = TRUE),
ci.style = "none", lattice = list(layout = c(4, 1)))
model.m2 <- lm(padavine ~ z.nv + x + z.nv:x , data = postaje)
setwd("C:/Users/UrbanMatjaz/OneDrive - IN516HT D.O.O/Desktop/FAKS/Linearni modeli/git/LinearniModeli/2024_25")
postaje<-read.table("POSTAJE.txt", header=TRUE, sep="\t")
str(postaje)
head(postaje)
summary(postaje)
rownames(postaje)<-postaje$Postaja
rownames(postaje)[is.na(postaje$x.gdol)]
rownames(postaje)[is.na(postaje$y.gsir)]
postaje <- postaje[postaje$Postaja != "Kredarica",]
# koordinate geografske dolžine in širine izrazimo v km
postaje$x <- postaje$x.gdol/1000
postaje$y <- postaje$y.gsir/1000
# izločimo dve postaji, ki nimata podatka za geografsko dolžino
postaje <- na.omit(postaje)
model.m2 <- lm(padavine ~ z.nv + x + z.nv:x , data = postaje)
plot(Effect(c("z.nv", "x"), model.m2, partial.residuals = TRUE),
ci.style = "none", lattice = list(layout = c(4, 1)))
setwd("C:/Users/UrbanMatjaz/OneDrive - IN516HT D.O.O/Desktop/FAKS/Linearni modeli/git/LinearniModeli")
