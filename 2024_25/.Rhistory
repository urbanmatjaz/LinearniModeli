col=c("red", "blue", "black"), lty=1, pch=16, bty="n")
library(leaps)
predict.regsubsets <- function(object, newdata, id){
form = as.formula(object$call[[2]])
mat = model.matrix(form, newdata)
coefi = coef(object, id=id)
xvars = names(coefi)
mat[,xvars]%*%coefi
}
K <- 5
set.seed(12)
folds <- sample(1:K, nrow(bodyfat), replace =TRUE)
mse <- matrix(NA, K, length(nap.sprem),
dimnames=list(NULL, paste(1:length(nap.sprem))))
for(j in 1:K){
naj.fit=regsubsets(siri ~., data=bodyfat[folds!=j,], nvmax=13)
# argument nvmax določa največji model
for(i in 1:length(nap.sprem)){
pred = predict(naj.fit, bodyfat[folds==j,], id=i)
mse[j, i] = mean((bodyfat$siri[folds==j] - pred)^2)
}
}
mean.mse <- apply(mse, 2, mean)
mean.mse
best_p_model$formula[best_p_model$p==which.min(mean.mse)]
best.fit = regsubsets(siri ~. , data = bodyfat, nvmax = 13)
summary(best.fit)$cp
best_p_model$formula[summary(best.fit)$cp==min(summary(best.fit)$cp)]
AIC <- numeric()
for (i in (1:(length(nap.sprem)+1))){
mod <- lm(best_p_model$formula[i], data = bodyfat)
AIC[i] <- AIC(mod)
}
best_p_model$AIC <- AIC
round(best_p_model$AIC,2)
best_p_model$formula[best_p_model$AIC==min(best_p_model$AIC)]
mod.null <- lm(siri ~ 1, data = bodyfat)
stepFS <- stepAIC(mod.null,
scope = ~age+weight+height+neck+chest+abdomen+hip+
thigh+knee+ankle+biceps+forearm+wrist,
direction = "forward",
trace=FALSE)
stepFS$anova
stepBE <- stepAIC(mod.polni, direction = "backward", trace = FALSE)
stepBE$anova
mod.prvi <- lm(siri ~ abdomen + height, data = bodyfat)
stepB <- stepAIC(mod.prvi,
scope = ~age+weight+height+neck+chest+abdomen+hip+
thigh+knee+ankle+biceps+forearm+wrist,
direction = "both",
trace = FALSE)
stepB$anova
stepFS2 <- stepAIC(lm(siri~abdomen+height, data=bodyfat),
direction = "forward",
scope = ~age+weight+height+neck+chest+abdomen+hip+
thigh+knee+ankle+biceps+forearm+wrist,
trace = FALSE)
stepFS2$anova
stepBE2 <- stepAIC(mod.polni,
direction = "backward",
scope = list(upper = formula(siri~age+weight+height+neck+
chest+abdomen+hip+thigh+knee+
ankle+biceps+forearm+wrist),
lower = formula(siri~abdomen+height)),
trace = FALSE)
stepBE2$anova
rm(list = ls())
library(reshape2) # reshape data sets for ggplot (melt)
library(ggplot2) # nice plots (ggplot)
library(knitr) # for markdown
library(ISLR) # datasets
library(splines) # spline basis functions
library(effects) # graphical effect displays
library(Hmisc) # data analysis, manipulation, and visualization
data("Wage")
model.stopnja1 <- lm(logwage ~ age * education, data = Wage)
model.ns3 <- lm(logwage ~ ns(age, df = 2) * education, data = Wage)
model.ns4 <- lm(logwage ~ ns(age, df = 3) * education, data = Wage)
model.ns5 <- lm(logwage ~ ns(age, df = 4) * education, data = Wage)
model.ns6 <- lm(logwage ~ ns(age, df = 5) * education, data = Wage)
model.ns7 <- lm(logwage ~ ns(age, df = 6) * education, data = Wage)
model.ns8 <- lm(logwage ~ ns(age, df = 7) * education, data = Wage)
model.ns9 <- lm(logwage ~ ns(age, df = 8) * education, data = Wage)
model.ns10 <- lm(logwage ~ ns(age, df = 9) * education, data = Wage)
modeli <- list(model.stopnja1, model.ns3, model.ns4, model.ns5,
model.ns6, model.ns7, model.ns8, model.ns9, model.ns10)
adj_r2 <- sapply(modeli, function(m) summary(m)$adj.r.squared)
plot(1:9, adj_r2, type="b",xlab="Stopinje prostosti naravnega zlepka",ylab="Prilagojeni R2")
plot(Wage$age, Wage$logwage, col ="gray", xlab="Starost", ylab="log(Plača)")
lines(age.nap, napovedi.ns4[,"fit"], col="blue", lwd=2)
age.nap <- seq(min(Wage$age), max(Wage$age), length.out = 100)
plot(Wage$age, Wage$logwage, col ="gray", xlab="Starost", ylab="log(Plača)")
lines(age.nap, napovedi.ns4[,"fit"], col="blue", lwd=2)
napovedi.ns4 <- data.frame(age = age.nap, education = "1. < HS Grad")
napovedi.ns4 <- cbind(napovedi.ns4, predict(model.ns3, newdata = napovedi.ns4, interval = "confidence"))
plot(Wage$age, Wage$logwage, col ="gray", xlab="Starost", ylab="log(Plača)")
lines(age.nap, napovedi.ns4[,"fit"], col="blue", lwd=2)
abline(v=c(min(Wage$age), attr(ns(Wage$age, df = 8),"knots"), max(Wage$age)), col="blue", lty=2)
matlines(age.nap, napovedi.ns4[, c("lwr","upr")], lwd = 1, col = "blue", lty = 2)
knitr::opts_chunk$set(echo = TRUE, comment = "",
fig.align = 'center',
fig.width = 5,
fig.height = 4,
warning = FALSE)
library(vtable) # summary table
library(kableExtra) # creates nice latex tables
library(corrplot) # correlation plot
library(car) # regression
library(reshape2) # reshape data sets for ggplot (melt)
library(ggplot2) # nice plots (ggplot)
library(knitr)  # for markdown
library(leaps) # best subset
library(glmnet) # lasso
library(mgcv) # gam
df <- data.frame(
xmin = c(0, 2, 3),
xmax = c(2, 3, 4),
ymin = c(0, 0, 0),
ymax = c(1, 1, 1),
label = c("Učni", "Validacijski", "Testni")
)
rm(list=ls())
df <- data.frame(
xmin = c(0, 2, 3),
xmax = c(2, 3, 4),
ymin = c(0, 0, 0),
ymax = c(1, 1, 1),
label = c("Učni", "Validacijski", "Testni")
)
ggplot() +
geom_rect(data = df, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = c("lightblue", "lightgreen", "lightpink"), color = "black") +
geom_text(data = df, aes(x = (xmin + xmax) / 2, y = (ymin + ymax) / 2, label = label),
size = 6, fontface = "bold") +
theme_void()
train_set <- read.table("bejzbol_train.txt", header=TRUE)
str(train_set)
train_set <- read.table("bejzbol_train.txt", header=TRUE)
str(train_set)
```{r, eval=FALSE, echo=FALSE}
dfSummary(train_set, plain.ascii=FALSE, style="grid", graph.magnif=0.8, valid.col = F, na.col = F,  tmp.img.dir = "/tmp")
dfSummary(train_set, plain.ascii=FALSE, style="grid", graph.magnif=0.8, valid.col = F, na.col = F,  tmp.img.dir = "/tmp")
library(summarytools) # summary table
install.packages('summarytools')
library(summarytools) # summary table
dfSummary(train_set, plain.ascii=FALSE, style="grid", graph.magnif=0.8, valid.col = F, na.col = F,  tmp.img.dir = "/tmp")
sumtable(train_set,
add.median = T, digits = 1,
title = "Opisne statistike za spremenljivke v podatkovnem okviru
\\texttt{bejzbol\\_train}.") %>%
kable_styling(latex_options = "HOLD_position")
train_long <- melt(train_set[, c("AtBat", "Hits", "HmRun", "Runs", "RBI", "Walks",
"Years", "CAtBat", "CHits", "CHmRun", "CRuns", "CRBI",
"CWalks", "PutOuts", "Assists", "Errors", "Salary")])
qplot(value, data = train_long) +
facet_wrap(~variable, scales = "free") +
theme_bw() +
xlab("")
corrplot.mixed(cor(train_set[, c("AtBat", "Hits", "HmRun", "Runs", "RBI", "Walks",
"Years", "CAtBat", "CHits", "CHmRun", "CRuns", "CRBI",
"CWalks", "PutOuts", "Assists", "Errors", "Salary")],
method = "spearman"),
lower.col = colors10, upper.col = colors10,
tl.col="black",   tl.cex = 0.5, number.cex = 0.8)
corrplot.mixed(cor(train_set[, c("AtBat", "Hits", "HmRun", "Runs", "RBI", "Walks",
"Years", "CAtBat", "CHits", "CHmRun", "CRuns", "CRBI",
"CWalks", "PutOuts", "Assists", "Errors", "Salary")],
method = "spearman"),
lower.col = colors10, upper.col = colors10,
tl.col="black",   tl.cex = 0.5, number.cex = 0.8)
colors10 <- colorRampPalette(c("#0000aa","white","#aa0000"))(10)
corrplot.mixed(cor(train_set[, c("AtBat", "Hits", "HmRun", "Runs", "RBI", "Walks",
"Years", "CAtBat", "CHits", "CHmRun", "CRuns", "CRBI",
"CWalks", "PutOuts", "Assists", "Errors", "Salary")],
method = "spearman"),
lower.col = colors10, upper.col = colors10,
tl.col="black",   tl.cex = 0.5, number.cex = 0.8)
train_set$Salary <- log(train_set$Salary)
pairs(train_set[, c("AtBat", "Hits", "HmRun", "Runs", "RBI", "Walks",
"Years", "CAtBat", "CHits", "CHmRun", "CRuns", "CRBI",
"CWalks", "PutOuts", "Assists", "Errors", "Salary")])
m0 <- lm(Salary~., data=train_set)
par(mfrow=c(2,2))
plot(m0)
vif(m0)
crPlots(m0, layout = c(4, 5))
train_resid_long <- cbind(train_long[train_long[,"variable"]!="Salary",],
"resid" = rep(m0$residuals, length(unique(train_long$variable))-1))
ggplot(data = train_resid_long, aes(x = value, y = resid)) +
geom_point() +
geom_smooth(se = T) +
facet_wrap( ~ variable, scale = "free") +
xlab("Vrednost napovedne spremenljivke") +
ylab("Ostanki") +
theme_bw()
# nvmax nastavimo na število vseh napovednih spremenljivk
best_subset = regsubsets(Salary ~. , data = train_set, nvmax = 19)
summary(best_subset)
plot(best_subset, scale = "Cp")
plot(best_subset, scale = "Cp") # cp je isto kot AIC
plot(best_subset, scale = "Cp") # cp je isto kot AIC
par(mfrow=c(1,1))
plot(best_subset, scale = "Cp") # cp je isto kot AIC
best_subset_summary = summary(best_subset)
names(best_subset_summary)
which.min(best_subset_summary$cp)
plot(best_subset_summary$cp, xlab = "Število napovednih spremenljivk", ylab = "Cp")
points(which.min(best_subset_summary$cp),
best_subset_summary$cp[which.min(best_subset_summary$cp)],
pch = 20, col = "red")
coef(best_subset, which.min(best_subset_summary$cp))
which.max(best_subset_summary$adjr2)
plot(best_subset_summary$adjr2,
xlab = "Število spremenljivk", ylab = expression(R[a]^2),
ylim=c(0.35, 0.6), type="b")
points(which.max(best_subset_summary$adjr2),
best_subset_summary$adjr2[which.max(best_subset_summary$adjr2)],
pch = 20, col = "red")
points(best_subset_summary$rsq, col = "green", type="b")
legend("bottomright", c("R2"),  col="green", bty="n", lty = 1)
coef(best_subset, which.max(best_subset_summary$adjr2))
bwd_sel = regsubsets(Salary ~., data = train_set, nvmax = 19, method = "backward")
bwd_sel_summary <- summary(bwd_sel)
plot(bwd_sel, scale = "Cp")
which.min(bwd_sel_summary$cp)
plot(bwd_sel_summary$cp,
xlab = "Število napovednih spremenljivk", ylab = "Cp", type="b")
points(which.min(bwd_sel_summary$cp),
bwd_sel_summary$cp[which.min(bwd_sel_summary$cp)],
pch = 20, col = "red")
coef(bwd_sel, which.min(bwd_sel_summary$cp))
fwd_sel = regsubsets(Salary ~., data = train_set, nvmax = 19, method = "forward")
fwd_sel_summary <- summary(fwd_sel)
plot(fwd_sel, scale = "Cp")
which.min(fwd_sel_summary$cp)
plot(fwd_sel_summary$cp,
xlab = "Število napovednih spremenljivk", ylab = "Cp", type="b")
points(which.min(fwd_sel_summary$cp),
fwd_sel_summary$cp[which.min(fwd_sel_summary$cp)],
pch = 20, col = "red")
coef(fwd_sel, which.min(fwd_sel_summary$cp))
df <- data.frame(
xmin = c(0, 1, 2, 3, 4),
xmax = c(1, 2, 3, 4, 5),
ymin = c(0, 0, 0, 0, 0),
ymax = c(1, 1, 1, 1, 1),
label = c("Učni", "Učni", "Validacijski", "Učni", "Učni")
)
ggplot() +
geom_rect(data = df, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = c("transparent"), color = "black") +
geom_text(data = df, aes(x = (xmin + xmax) / 2, y = (ymin + ymax) / 2, label = label),
size = 6, fontface = "bold",
color = c("black", "black", "red", "black", "black" )) +
theme_void()
predict.regsubsets <- function(object, newdata, id){
form = as.formula(object$call[[2]])
mat = model.matrix(form, newdata)
coefi = coef(object, id=id)
xvars = names(coefi)
mat[,xvars]%*%coefi
}
K=5
set.seed(1)
folds <- sample(1:K, nrow(train_set), replace=TRUE)
cv.errors <- matrix(NA, K, 19, dimnames=list(NULL, paste(1:19)))
for(j in 1:K){
best.fit=regsubsets(Salary~., data=train_set[folds!=j,], nvmax=19)
for(i in 1:19){
pred = predict(best.fit, train_set[folds==j,], id=i)
cv.errors[j, i] = mean((train_set$Salary[folds==j] - pred)^2)
}
}
mean.cv.errors=apply(cv.errors, 2, mean)
mean.cv.errors
library(cvTools)
library(olsrr)
library(MASS)
library(vtable)
library(knitr)
library(kableExtra)
library(reshape2)
library(ggplot2)
library(corrplot)
library(dplyr)
library(car)
bodyfat <- read.table("bodyfat.txt", header=T)
str(bodyfat)
summary(bodyfat)
nap.sprem <- names(bodyfat)
(nap.sprem <- nap.sprem[! nap.sprem %in% "siri"])
(k <- length(nap.sprem)) # k = 13
(formule <- paste("siri~", 1))
id <- unlist(lapply(1:k,function(i) combn(1:k, i, simplify = FALSE)),
recursive = FALSE)
length(id)
2^k
formule[2:2^k] <- sapply(id, function(i)
paste("siri~", paste(nap.sprem[i], collapse="+")))
length(formule)
p <- c(0, sapply(id, length))
# podatkovni okvir za izpis rezultatov RSS
tabelaRSS <- data.frame(formula = formule, p = p)
RSS <- numeric()
for (i in (1:length(formule))){
mod <- lm(formule[i], data = bodyfat)
RSS[i] <- sum(resid(mod)^2)
}
tabelaRSS$RSS <- RSS
best_p_model <- tabelaRSS %>%
group_by(p) %>%
slice_min(order_by = RSS)
best_p_model
par(mfrow = c(1, 1))
plot(tabelaRSS$p, tabelaRSS$RSS, xlab="p", ylab=expression(SS[residuals]), ylim=c(0, 18000))
lines(best_p_model$p, best_p_model$RSS, pch=16, col="red", type="b")
PRESS <- numeric()
for (i in (1:(length(nap.sprem)+1))){
mod <- lm(best_p_model$formula[i], data = bodyfat)
h <- lm.influence(mod)$hat
press.ost <- residuals(mod)/(1 - h)
PRESS[i] <- sum(press.ost^2)
}
best_p_model$PRESS <- PRESS
plot(best_p_model$p[-1], best_p_model$RSS[-1], pch=16, ylim=c(4200,5700))
points(best_p_model$p[-1], best_p_model$PRESS[-1], col="red", pch=16)
izbrani <- best_p_model$p[best_p_model$PRESS==min(best_p_model$PRESS)]
abline(v = izbrani, col = "blue", lty = 2, lwd=2)
best_p_model$formula[izbrani+1]
(n <- dim(bodyfat)[1])
(n.u <- round(n/2))
(n.t <- floor(n/2))
ind <- rep(c(TRUE, FALSE), c(n.u, n.t))
ind <- sample(ind)
bodyfat.ucni <- bodyfat[ind,]
bodyfat.test <- bodyfat[!ind,]
mod.ucni <- lm(siri ~ ., data = bodyfat.ucni)
y.nap <- predict(mod.ucni, bodyfat.test)
(CVC <- sum((bodyfat.test$siri - y.nap)^2))
(RSS <- sum((mod.ucni$residuals)^2))
(MSE <- CVC/n.t)
(RMSE <- sqrt(CVC/n.t))
# funkcija za izpis R^2
get_r2 <- function(formula, data) {
model <- lm(formula, data = data)
return(summary(model)$r.squared)
}
# najboljši model s p-spremenljivkami
naj.podmn <- function(formule, p, data){
formula_i <- NULL
for (i in 1:k){
formule_p <- as.list(formule[which(p==i)])
r2 <- unlist(lapply(formule_p, get_r2, data = data))
formula_i[i] <- formule_p[which.max(r2)]
}
return(formula_i)
}
# funkcija za izračun napovedi na testnem vzorcu na podlagi
# parametrov ocenjenih na učnem vzorcu
nap.test <- function(formula, pod_ucni, pod_test) {
model <- lm(formula, data = pod_ucni)
return(predict(model, pod_test))
}
mse <- matrix(NA, 5, length(nap.sprem))
for (j in 1:5) {
izbor <- rep(c(TRUE, FALSE), c(n.u, n.t))
set.seed(j * 10)
izbor <- sample(izbor)
bodyfat.ucni <- bodyfat[izbor,]
bodyfat.test <- bodyfat[!izbor,]
naj_fit_ucni <- naj.podmn(formule, p, data=bodyfat.ucni)
val_nap <- lapply(naj_fit_ucni, nap.test, pod_ucni = bodyfat.ucni,
pod_test = bodyfat.test)
for(i in 1:length(nap.sprem)){
mse[j, i] = mean((bodyfat.test$siri - val_nap[[i]])^2)
}
}
plot(1:length(nap.sprem), mse[1, ], ylim=c(17, 25), xlab="p", ylab="MSE", type="b", pch=16)
points(which.min(mse[1, ]), min(mse[1, ]), pch=17, cex=2)
for(i in c(2:5)){
lines(1:length(nap.sprem), mse[i, ], type="b", pch=16, col=i)
points(which.min(mse[i, ]), min(mse[i, ]), pch=17, cex=2, col=i)
}
K <- 10
set.seed(10)
folds <- sample(1:K, nrow(bodyfat), replace =TRUE)
table(folds)
mse <- matrix(NA, K, length(nap.sprem),
dimnames=list(NULL, paste(1:length(nap.sprem))))
for(j in 1:K){
# izbiro najboljše podmnožice moramo ponoviti K-krat
naj_fit <- naj.podmn(formule, p, data = bodyfat[folds!=j,])
# napovedi za testni vzorec na podlagi ocen na učnem vzorcu
pred <- lapply(naj_fit, nap.test, pod_ucni = bodyfat[folds!=j,],
pod_test = bodyfat[folds==j,])
for(i in 1:length(nap.sprem)){
mse[j, i] = mean((bodyfat$siri[folds==j] - pred[[i]])^2)
}
}
B=500
rfs <- matrix(NA, nrow=B, ncol=length(nap.sprem))
coefs <- matrix(0, nrow=B, ncol=length(nap.sprem))
colnames(rfs) <- colnames(coefs) <- names(bodyfat)[-1]
msf <- vector(mode='character',length=B)
set.seed(333)
for(i in 1:B){
id <- sample(1:nrow(bodyfat), size = nrow(bodyfat), replace = T)
bodyfat_sub <- bodyfat[id, ]
stepBE_boot <- stepAIC(lm(siri ~ ., data=bodyfat_sub),
direction = "backward",
trace = FALSE)
izbor <- names(coef(stepBE_boot))[-1]
rfs[i, ] <- is.element(nap.sprem, izbor)
msf[i] <- paste(names(coef(stepBE_boot)), collapse="+")
coefs[i, which(is.element(nap.sprem, izbor)==T)] <- coef(stepBE_boot)[-1]
}
stabilnost <- data.frame("koef_polni" = mod.polni$coefficients[-1],
"SE_polni" = sqrt(diag(vcov(mod.polni)))[-1],
"koef_izbrani" = NA,
"se_izbrani" = NA,
"RFS" = apply(rfs, 2, sum)/500) # relativna frekvenca vključitve
mod.polni <- lm(siri ~ ., data = bodyfat)
stabilnost <- data.frame("koef_polni" = mod.polni$coefficients[-1],
"SE_polni" = sqrt(diag(vcov(mod.polni)))[-1],
"koef_izbrani" = NA,
"se_izbrani" = NA,
"RFS" = apply(rfs, 2, sum)/500) # relativna frekvenca vključitve
stabilnost$koef_izbrani[which(is.element(nap.sprem, names(stepBE$coef)[-1])==T)] <-
stepBE$coefficients[-1]
stepBE2 <- stepAIC(mod.polni,
direction = "backward",
scope = list(upper = formula(siri~age+weight+height+neck+
chest+abdomen+hip+thigh+knee+
ankle+biceps+forearm+wrist),
lower = formula(siri~abdomen+height)),
trace = FALSE)
stabilnost$koef_izbrani[which(is.element(nap.sprem, names(stepBE$coef)[-1])==T)] <-
stepBE$coefficients[-1]
stepBE <- stepAIC(mod.polni, direction = "backward", trace = FALSE)
stabilnost$koef_izbrani[which(is.element(nap.sprem, names(stepBE$coef)[-1])==T)] <-
stepBE$coefficients[-1]
stabilnost$se_izbrani[which(is.element(nap.sprem, names(stepBE$coef)[-1])==T)] <-
sqrt(diag(vcov(stepBE)))[-1]
nap.sprem_order <- order(apply(rfs, 2, mean), decreasing=T)
stabilnost[with(stabilnost, order(-RFS)), ]
ci_izbrani <- matrix(NA, length(nap.sprem), 2)
ci_izbrani[which(is.element(nap.sprem, names(stepBE$coef)[-1])==T), ] <- confint(stepBE)[-1,]
coefs_plot <- data.frame("Spremenljivka" = rep(nap.sprem, 3),
"Model" = rep(c("1-polni", "2-izbrani", "3-bootstrap"),
each=length(nap.sprem)),
rbind(cbind(coef(mod.polni), confint(mod.polni))[-1,],
cbind(stabilnost$koef_izbrani, ci_izbrani),
cbind(apply(coefs, 2, median),
apply(coefs, 2, function(x) quantile(x, probs=0.025)),
apply(coefs, 2, function(x) quantile(x, probs=0.975)))
)
)
coefs_plot[is.na(coefs_plot)] <- 0
colnames(coefs_plot) <- c("Spremenljivka", "Model", "ocena", "spodnja", "zgornja")
coefs_plot$Spremenljivka <- factor(coefs_plot$Spremenljivka,
levels = rownames(stabilnost)[nap.sprem_order])
coefs_plot$Model <- factor(coefs_plot$Model, levels =  unique(coefs_plot$Model)[3:1])
ggplot(aes(x=ocena, y= Spremenljivka, xmin =spodnja, xmax = zgornja, color = Model),
data = coefs_plot) +
geom_point(position = position_dodge(0.9)) +
geom_errorbarh(height = 0.2, position = position_dodge(0.9)) +
theme_bw() +
scale_y_discrete(limits=rev) +
theme(legend.title = element_blank(), legend.position = "bottom")  +
guides(colour = guide_legend(reverse=T)) +
xlab("Ocena parametra")
coefs_ordered <- coefs[, nap.sprem[nap.sprem_order]]
coefs_ordered_long <- melt(coefs_ordered)
qplot(value, data = coefs_ordered_long) +
geom_vline(xintercept = 0, color = "blue") +
facet_wrap(~ Var2, scales = "free", ncol = 3) +
theme_bw() +
xlab("Ocene parametrov") +
ylab("Število bootstrap vzorcev")
tabela_msf <- prop.table(table(msf)) %>%
as.data.frame() %>%
arrange(desc(Freq))
tabela_msf[1:10, ]
coefs_ordered_01 <- coefs_ordered != 0
rfs2 <- sort(apply(rfs, 2, mean), decreasing=T) * 100
pval <- 0.01
pairfreq <- matrix(100, ncol = length(nap.sprem), nrow = length(nap.sprem),
dimnames = list(nap.sprem[nap.sprem_order], nap.sprem[nap.sprem_order]))
expect_pairfreq <- NULL
combis <- combn(nap.sprem[nap.sprem_order], 2)
dim(combis)
for (i in 1:dim(combis)[2]) {
# relativna frekvenca prisotnosti para spremenljivk v B bootstrap izbranih modelih
pairfreq[combis[1, i], combis[2, i]] <-
sum(apply(coefs_ordered_01[, combis[, i]], 1, sum) == 2) / B * 100
# pričakovana relativna frekvenca če je vključenost ene neodvisna od vključenosti druge
expect_pairfreq[i] <-
rfs2[grepl(combis[1, i], nap.sprem[nap.sprem_order])][1] *
rfs2[grepl(combis[2, i], nap.sprem[nap.sprem_order])][1] / 100
pairfreq[combis[2, i], combis[1, i]] <-
ifelse(is(suppressWarnings(try(chisq.test(coefs_ordered_01[, combis[1, i]],
coefs_ordered_01[, combis[2, i]]),
silent = T)), "try-error"), NA,
ifelse(suppressWarnings(chisq.test(coefs_ordered_01[,combis[1,i]],
coefs_ordered_01[,combis[2,i]])$p.value)>pval,
"",
ifelse(as.numeric(pairfreq[combis[1,i],combis[2,i]])<expect_pairfreq[i],
"-", "+")))
}
diag(pairfreq) <- rfs2
pairfreq <- pairfreq[!diag(pairfreq) == 100, !diag(pairfreq) == 100]
print(pairfreq, quote = F)
