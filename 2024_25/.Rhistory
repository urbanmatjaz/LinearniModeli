weights1 = NULL
for(i in 1:3){
weights1[i] = (sum(populacija[i,]))/(sum(vzorec[i,]))
}
kable(weights1)
step1 = data.frame(vzorec * weights1)
step1Margins = data.frame(rbind(cbind(rbind(cbind(step1, rowSums(step1)), c(colSums(step1), NA)), c(rowSums(populacija), NA)), c(colSums(populacija), NA, 1000)))
colnames(step1Margins) = c('A0', "A1", "Margins", "Pricakovana (Populacijska) vrednost")
rownames(step1Margins) = c('1', "2", "3", "Margins", "Pricakovana (Populacijska) vrednost")
kable(step1Margins, caption = "Margine na 1. koraku")
povpYRaking = povpY * weights1
kable(povpYRaking, caption = "Povprecje Y")
weights2 = c(sum(populacija[,1])/sum(step1[,1]), sum(populacija[,2])/sum(step1[,2]))
kable(weights2)
step2 = data.frame(step1[,1]*weights2[1], step1[,2]*weights2[2])
step2Margins = data.frame(rbind(cbind(rbind(cbind(step2, rowSums(step2)), c(colSums(step2), NA)), c(rowSums(populacija), NA)), c(colSums(populacija), NA, 1000)))
colnames(step2Margins) = c('A0', "A1", "Margins", "Pricakovana (Populacijska) vrednost")
rownames(step2Margins) = c('1', "2", "3", "Margins", "Pricakovana (Populacijska) vrednost")
kable(step2Margins, caption = "Margine na 2. koraku")
povpYRaking = data.frame(povpYRaking[,1] * weights2[1], povpYRaking[,2] * weights2[2])
kable(povpYRaking, caption = "Povprecje Y")
weights3 = NULL
for(i in 1:3){
weights3[i] = (sum(populacija[i,]))/(sum(step2[i,]))
}
kable(weights3)
step3 = data.frame(step2 * weights3)
step3Margins = data.frame(rbind(cbind(rbind(cbind(step3, rowSums(step3)), c(colSums(step3), NA)), c(rowSums(populacija), NA)), c(colSums(populacija), NA, 1000)))
colnames(step3Margins) = c('A0', "A1", "Margins", "Pricakovana (Populacijska) vrednost")
rownames(step3Margins) = c('1', "2", "3", "Margins", "Pricakovana (Populacijska) vrednost")
kable(step3Margins, caption = "Margine na 3. koraku")
povpYRaking = povpYRaking * weights3
kable(povpYRaking, caption = "Povprecje Y")
finalUtezi = populacija/step3
kable(finalUtezi*1000/sum(finalUtezi))
poststratifikacijaUtezi = populacija/vzorec
kable(poststratifikacijaUtezi)
kable(povpY, caption = "Povprecje Y")
povpYPost = povpY * poststratifikacijaUtezi
kable(povpYPost)
kable(poststratifikacijaUtezi*1000/sum(poststratifikacijaUtezi))
kable(abs(povpY - povpYRaking))
kable(abs(povpY - povpYPost))
data.frame("Abs razlika Raking" = sum(abs(povpY - povpYRaking)),"Abs razlika poststratifikacije" = sum(abs(povpY - povpYPost)))
nUtezi = 6
uteziRaking = c(finalUtezi[,1], finalUtezi[,2])
uteziPost = c(poststratifikacijaUtezi[,1], poststratifikacijaUtezi[,2])
vwRaking = nUtezi * (1/(nUtezi-1)) * sum((uteziRaking-mean(uteziRaking))^2) # nUtezi * var(uteziRaking)
vwPost = nUtezi * var(uteziPost)
cvRaking = sqrt(vwRaking)/sum(uteziRaking) * sqrt(nUtezi)
cvPost = sqrt(vwPost)/sum(uteziPost) * sqrt(nUtezi)
VIFRaking = 1+cvRaking^2
VIFPost = 1+cvPost^2
kable(data.frame("VIF-Raking" = VIFRaking, "VIF-Poststratifikacija" = VIFPost))
kable(weights1)
kable(povpYRaking, caption = "Povprecje Y")
kable(weights2)
kable(poststratifikacijaUtezi*1000/sum(poststratifikacijaUtezi))
View(povpY)
View(populacija)
View(vzorec)
View(povpYPost)
View(povpYRaking)
View(populacijaMargins)
View(vzorecMargins)
kable(populacijaMargins, caption = "Populacija")
View(povpYPost)
kable(poststratifikacijaUtezi*1000/sum(poststratifikacijaUtezi))
View(countY)
mean(povpY)/mean(povpYPost)
povpY
povpYPost
mean(povpYPost)
mean(as.numeric(povpYPost))
mean(as.matrix(povpY))
mean(as.matrix(povpY))/mean(as.matrix(povpYPost))
mean(as.matrix(povpYPost))/mean(as.matrix(povpY))
mean(as.matrix(povpYRaking))/mean(as.matrix(povpY))
relDif = data.frame(mean(as.matrix(povpYPost))/mean(as.matrix(povpY)), mean(as.matrix(povpYRaking))/mean(as.matrix(povpY)))
colnames(relDif) = c("Rel. razlika Poststratifikacija", "Rel. razlika Raking")
kable(relDif)
mean(as.matrix(povpYPost))-mean(as.matrix(povpY))
bias^2 + var(y)
bias = mean(as.matrix(povpYPost))-mean(as.matrix(povpY))
bias^2 + var(y)
var(y) * VIFPost
bias = mean(as.matrix(povpYPost))-mean(as.matrix(povpY))
MSEBias = bias^2 + var(y)
MSEWOBias = var(y) * VIFPost
df = data.frame("bias" = bias, "MSE - utezen" = MSEBias, "MSE - neutezen" = MSEWOBias)
kable(df)
biasPost = mean(as.matrix(povpYPost))-mean(as.matrix(povpY))
MSEBias = bias^2 + var(y)
MSEWOBias = var(y) * VIFPost
df = data.frame("bias" = biasPost, "MSE - utezen" = MSEBias, "MSE - neutezen" = MSEWOBias)
kable(df)
library(knitr)
biasPost = mean(as.matrix(povpYPost))-mean(as.matrix(povpY))
MSEBias = bias^2 + var(y)
MSEWOBias = var(y) * VIFPost
df = data.frame("bias" = biasPost, "MSE - utezen" = MSEBias, "MSE - neutezen" = MSEWOBias)
kable(df)
mean(as.matrix(povpYRaking))-mean(as.matrix(povpY))
mean(as.matrix(povpYPost))-mean(as.matrix(povpY))
biasRaking^2 + var(y)
biasRaking = mean(as.matrix(povpYRaking))-mean(as.matrix(povpY))
biasRaking^2 + var(y)
MSEBias
var(y) * VIFRaking
MSEWOBiasRaking = var(y) * VIFRaking
df = data.frame("MSE - utezen Raking" = MSERaking, "MSE - neutezen Raking" = MSEWOBiasRaking, "MSE - neutezen Poststratifikacija" = MSEWOBias)
MSERaking = biasRaking^2 + var(y)
df = data.frame("bias" = biasRaking, "MSE - utezen" = MSERaking, "MSE - neutezen" = MSEWOBias)
kable(df)
MSEWOBiasRaking = var(y) * VIFRaking
df = data.frame("MSE - utezen Raking" = MSERaking, "MSE - neutezen Raking" = MSEWOBiasRaking, "MSE - neutezen Poststratifikacija" = MSEWOBias)
kable(df)
dbeta(sequ, shape1 = 5, shape2 = 1)
dbeta(seq(0,1,by = 0.001), shape1 = 5, shape2 = 1)
plot(dbeta(seq(0,1,by = 0.001), shape1 = 5, shape2 = 1))
curve(dbeta(seq(0,1,by = 0.001), shape1 = 5, shape2 = 1))
curve(dbeta(x, shape1 = 5, shape2 = 1))
curve(dbeta(seq(0,1,by = 0.001), shape1 = 5, shape2 = 1), type = "l")
plot(dbeta(seq(0,1,by = 0.001), shape1 = 5, shape2 = 1), type = "l")
plot(dbeta(seq(0,1,by = 0.01), shape1 = 5, shape2 = 1), type = "l")
knitr::opts_chunk$set(echo = TRUE)
par(mfrow=c(2,2))
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
library(ggplot2)
library(ggpubr)
library(GLMsData)
library(effects)
library(emmeans)
library(car)
data(lungcap)
str(lungcap)
summary(lungcap)
par(mfrow=c(2,2))
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
mod2.int <- lm(log(FEV) ~ Age*Ht*Gender*Smoke, data=lungcap)
par(mfrow=c(2,2))
plot(mod2.int)
summary(mod2.int)
# Ht, telesna višina v cm
lungcap$Ht <- lungcap$Ht*2.54
#  Smoke naj bo faktor z vrednostma "Ne" in "Da"
lungcap$Smoke <- factor(lungcap$Smoke, labels=c("Ne", "Da"))
levels(lungcap$Gender)
# zamenjamo oznaki za spol za grafične prikaze
levels(lungcap$Gender) <- c("Ženske", "Moški")
mod2.int <- lm(log(FEV) ~ Age*Ht*Gender*Smoke, data=lungcap)
par(mfrow=c(2,2))
plot(mod2.int)
summary(mod2.int)
par(mfrow=c(2,2))
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
plot(mod2.int)
par(mfrow=c(2,2))
plot(mod2.int)
anova(mod2.int)
par(mfrow=c(1,1))
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
lungcap
rm(list = ls())
data(lungcap)
View(lungcap)
lungcap$Ht <- lungcap$Ht*2.54
lungcap$Smoke <- factor(lungcap$Smoke, labels=c("Ne", "Da"))
levels(lungcap$Gender)
levels(lungcap$Gender) <- c("Ženske", "Moški")
mod2.int <- lm(log(FEV) ~ Age*Ht*Gender*Smoke, data=lungcap)
par(mfrow=c(2,2))
plot(mod2.int)
anova(mod2.int)
par(mfrow=c(1,1))
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
par(mfrow=c(2,2))
plot(mod2.int)
par(mfrow=c(1,1))
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
plot(Effect(c("Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
"Age",
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
plot(Effect(c("Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
rm(list = ls())
getData = function(beta_3, n = 100, beta_0 = 10, beta_1 = 0.5, beta_2 = 0.15, sigma = 10) {
set.seed(1)
x1 = runif(n, 50, 100)
x2 = runif(n, 50, 100)
eps = rnorm(n, mean = 0, sd = sigma)
y = beta_0 + beta_1 * x1 + beta_2 * x2 + beta_3 * x1 * x2 + eps
data.frame(x1 = x1, x2 = x2, y = y)
}
beta_3_values = c(0, 0.05, 0.5)
data_list = lapply(beta_3_values, generate_data)
getData = function(beta_3, n = 100, beta_0 = 10, beta_1 = 0.5, beta_2 = 0.15, sigma = 10) {
set.seed(1)
x1 = runif(n, 50, 100)
x2 = runif(n, 50, 100)
eps = rnorm(n, mean = 0, sd = sigma)
y = beta_0 + beta_1 * x1 + beta_2 * x2 + beta_3 * x1 * x2 + eps
data.frame(x1 = x1, x2 = x2, y = y)
}
beta_3_values = c(0, 0.05, 0.5)
data_list = lapply(beta_3_values, getData)
lapply(data_list, head)
View(data_list)
rm(data_list)
i = 1
for (b in beta_3_values) {
data_list[i] = getData(b)
i = i + 1
}
data_list = numeric()
i = 1
for (b in beta_3_values) {
data_list[i] = getData(b)
i = i + 1
}
View(data_list)
getData = function(beta_3, n = 100, beta_0 = 10, beta_1 = 0.5, beta_2 = 0.15, sigma = 10) {
set.seed(1)
x1 = runif(n, 50, 100)
x2 = runif(n, 50, 100)
eps = rnorm(n, mean = 0, sd = sigma)
y = beta_0 + beta_1 * x1 + beta_2 * x2 + beta_3 * x1 * x2 + eps
data.frame(x1 = x1, x2 = x2, y = y)
}
beta_3_values = c(0, 0.05, 0.5)
data_list = lapply(beta_3_values, getData)
View(data_list)
rm(data_list)
data = lapply(beta_3_values, getData)
rm(i)
rm(b)
data_list[[2]]
rm(data)
data_list = lapply(beta_3_values, getData)
data_list[[2]]
data_list[[3]]
data_list[[3]] - data_list[[2]]
data_1 <- data_list[[1]]
model_1 <- lm(y ~ x1 + x2, data = data)
data_1 <- data_list[[1]]
model_1 <- lm(y ~ x1 + x2, data = data_1)
data_2 <- data_list[[2]]
model_2 <- lm(y ~ x1 + x2, data = data_2)
data_3 <- data_list[[3]]
model_3 <- lm(y ~ x1 + x2, data = data_3)
summary(model_1)
summary(model_1)
plot(model_1)
par(mfrow = c(2, 2))
plot(model_1)
avPlots(model_1)
library(car)
avPlots(model_1)
crPlots(model_1)
summary(model_2)
plot(model_2)
avPlots(model_2)
crPlots(model_2)
summary(model_3)
plot(model_3)
plot(model_2)
plot(model_3)
avPlots(model_3)
crPlots(model_3)
plot(model_1)
plot(model_2)
knitr::opts_chunk$set(echo = TRUE)
library(car)
summary(model_3)
summary(model_1)
summary(model_1)
summary(model_2)
plot(model_1)
par(mfrow = c(2, 2))
plot(model_1)
avPlots(model_1)
crPlots(model_1)
plot(model_1)
rm(list = ls())
model <- lm(logwage ~ ns(age, df = 4) + education, data = data)
data("Wage")
library(reshape2) # reshape data sets for ggplot (melt)
library(ggplot2) # nice plots (ggplot)
library(knitr) # for markdown
library(ISLR) # datasets
library(splines) # spline basis functions
library(effects) # graphical effect displays
library(Hmisc) # data analysis, manipulation, and visualization
data("Wage")
model <- lm(logwage ~ ns(age, df = 4) + education, data = Wage)
summary(model)
pred_data$logwage <- predict(model, newdata = pred_data)
age_range <- seq(min(data$age), max(data$age), length.out = 100)
age_range <- seq(min(Wage$age), max(Wage$age), length.out = 100)
pred_data <- data.frame(age = age_range, education = "4. College Grad")
View(pred_data)
View(Wage)
View(Wage)
pred_data <- data.frame(age = age_range, education = "1. < HS Grad")
pred_data$logwage <- predict(model, newdata = pred_data)
View(pred_data)
ggplot(pred_data, aes(x = age, y = logwage)) +
geom_line(color = "blue", size = 1) +
labs(title = "Natural Spline: logwage vs age",
x = "Age",
y = "Predicted logwage") +
theme_minimal()
model.ns3 <- lm(logwage ~ ns(age, df = 2), data = Wage)
model.ns4 <- lm(logwage ~ ns(age, df = 3), data = Wage)
model.ns5 <- lm(logwage ~ ns(age, df = 4), data = Wage)
model.ns6 <- lm(logwage ~ ns(age, df = 5), data = Wage)
model.ns7 <- lm(logwage ~ ns(age, df = 6), data = Wage)
model.ns8 <- lm(logwage ~ ns(age, df = 7), data = Wage)
model.ns9 <- lm(logwage ~ ns(age, df = 8), data = Wage)
model.ns10 <- lm(logwage ~ ns(age, df = 9), data = Wage)
age.nap <- seq(min(Wage$age), max(Wage$age), length.out = 100)
napovedi.ns3 <- predict(model.ns3, newdata =data.frame(age=age.nap),interval="confidence")
napovedi.ns4 <- predict(model.ns4, newdata =data.frame(age=age.nap),interval="confidence")
napovedi.ns5 <- predict(model.ns5, newdata =data.frame(age=age.nap),interval="confidence")
napovedi.ns6 <- predict(model.ns6, newdata =data.frame(age=age.nap),interval="confidence")
napovedi.ns7 <- predict(model.ns7, newdata =data.frame(age=age.nap),interval="confidence")
napovedi.ns8 <- predict(model.ns8, newdata =data.frame(age=age.nap),interval="confidence")
napovedi.ns9 <- predict(model.ns9, newdata =data.frame(age=age.nap),interval="confidence")
napovedi.ns10 <- predict(model.ns10, newdata =data.frame(age=age.nap),interval="confidence")
plot(Wage$age, Wage$logwage, col ="gray", xlab="Starost", ylab="log(Plača)")
lines(age.nap, napovedi.ns3[,"fit"], col="#FFFFCC", lwd=2)
abline(v=attr(ns(Wage$age, df = 2),"knots"), col="#FFFFCC", lty=2)
lines(age.nap, napovedi.ns4[,"fit"], col="#FFEDA0", lwd=2)
abline(v=attr(ns(Wage$age, df = 3),"knots"), col="#FFEDA0", lty=2)
lines(age.nap, napovedi.ns5[,"fit"], col="#FED976", lwd=2)
abline(v=attr(ns(Wage$age, df = 4),"knots"), col="#FED976", lty=2)
lines(age.nap, napovedi.ns6[,"fit"], col="#FEB24C", lwd=2)
abline(v=attr(ns(Wage$age, df = 5),"knots"), col="#FEB24C", lty=2)
lines(age.nap, napovedi.ns7[,"fit"], col="#FD8D3C", lwd=2)
abline(v=attr(ns(Wage$age, df = 6),"knots"), col="#FD8D3C", lty=2)
lines(age.nap, napovedi.ns8[,"fit"], col="#FC4E2A", lwd=2)
abline(v=attr(ns(Wage$age, df = 7),"knots"), col="#FC4E2A", lty=2)
lines(age.nap, napovedi.ns9[,"fit"], col="#E31A1C", lwd=2)
abline(v=attr(ns(Wage$age, df = 8),"knots"), col="#E31A1C", lty=2)
lines(age.nap, napovedi.ns10[,"fit"], col="#BD0026", lwd=2)
abline(v=attr(ns(Wage$age, df = 9),"knots"), col="#BD0026", lty=2)
model.ns3 <- lm(logwage ~ ns(age, df = 2) + education, data = Wage)
model.ns4 <- lm(logwage ~ ns(age, df = 3) + education, data = Wage)
model.ns5 <- lm(logwage ~ ns(age, df = 4) + education, data = Wage)
model.ns6 <- lm(logwage ~ ns(age, df = 5) + education, data = Wage)
model.ns7 <- lm(logwage ~ ns(age, df = 6) + education, data = Wage)
model.ns8 <- lm(logwage ~ ns(age, df = 7) + education, data = Wage)
model.ns9 <- lm(logwage ~ ns(age, df = 8) + education, data = Wage)
model.ns10 <- lm(logwage ~ ns(age, df = 9) + education, data = Wage)
napovedi.ns3 <- predict(model.ns3, newdata =data.frame(age=age.nap),interval="confidence")
napovedi.ns3 <- data.frame(age = age.nap, education = "1. < HS Grad")
napovedi.ns3$logwage <- predict(model.ns3, newdata =data.frame(age=napovedi.ns3),interval="confidence")
View(napovedi.ns10)
View(napovedi.ns3)
View(napovedi.ns3)
View(napovedi.ns4)
model.ns3 <- lm(logwage ~ ns(age, df = 2) + education, data = Wage)
model.ns4 <- lm(logwage ~ ns(age, df = 3) + education, data = Wage)
model.ns5 <- lm(logwage ~ ns(age, df = 4) + education, data = Wage)
model.ns6 <- lm(logwage ~ ns(age, df = 5) + education, data = Wage)
model.ns7 <- lm(logwage ~ ns(age, df = 6) + education, data = Wage)
model.ns8 <- lm(logwage ~ ns(age, df = 7) + education, data = Wage)
model.ns9 <- lm(logwage ~ ns(age, df = 8) + education, data = Wage)
model.ns10 <- lm(logwage ~ ns(age, df = 9) + education, data = Wage)
napovedi.ns3 <- data.frame(age = age.nap, education = "1. < HS Grad")
View(napovedi.ns3)
napovedi.ns3$logwage <- predict(model.ns3, newdata =data.frame(age=napovedi.ns3),interval="confidence")
predict(model.ns3, newdata = data.frame(age=napovedi.ns3), interval="confidence")
View(napovedi.ns3)
napovedi.ns3 <- cbind(napovedi.ns3, predict(model.ns3, newdata = napovedi.ns3, interval = "confidence"))
View(napovedi.ns3)
age.nap <- seq(min(Wage$age), max(Wage$age), length.out = 100)
napovedi.ns3 <- data.frame(age = age.nap, education = "1. < HS Grad")
napovedi.ns3 <- cbind(napovedi.ns3, predict(model.ns3, newdata = napovedi.ns3, interval = "confidence"))
napovedi.ns4 <- data.frame(age = age.nap, education = "2. HS Grad")
napovedi.ns4 <- cbind(napovedi.ns4, predict(model.ns3, newdata = napovedi.ns4, interval = "confidence"))
napovedi.ns5 <- data.frame(age = age.nap, education = "3. Some College")
napovedi.ns5 <- cbind(napovedi.ns5, predict(model.ns3, newdata = napovedi.ns5, interval = "confidence"))
napovedi.ns6 <- data.frame(age = age.nap, education = "4. College Grad")
napovedi.ns6 <- cbind(napovedi.ns6, predict(model.ns3, newdata = napovedi.ns6, interval = "confidence"))
napovedi.ns7 <- data.frame(age = age.nap, education = "5. Advanced Degree")
napovedi.ns7 <- cbind(napovedi.ns7, predict(model.ns3, newdata = napovedi.ns7, interval = "confidence"))
napovedi.ns8 <- data.frame(age = age.nap, education = "1. < HS Grad")
napovedi.ns8 <- cbind(napovedi.ns8, predict(model.ns3, newdata = napovedi.ns8, interval = "confidence"))
napovedi.ns9 <- data.frame(age = age.nap, education = "2. HS Grad")
napovedi.ns9 <- cbind(napovedi.ns9, predict(model.ns3, newdata = napovedi.ns9, interval = "confidence"))
napovedi.ns10 <- data.frame(age = age.nap, education = "3. Some College")
napovedi.ns10 <- cbind(napovedi.ns10, predict(model.ns3, newdata = napovedi.ns10, interval = "confidence"))
modeli <- list(model.ns3, model.ns4, model.ns5,
model.ns6, model.ns7, model.ns8, model.ns9, model.ns10)
adj_r2 <- sapply(modeli, function(m) summary(m)$adj.r.squared)
plot(1:9, adj_r2, type="b",
xlab="Stopinje prostosti naravnega zlepka",
ylab="Prilagojeni R2")
plot(1:8, adj_r2, type="b", xlab="Stopinje prostosti naravnega zlepka", ylab="Prilagojeni R2")
model.stopnja1 <- lm(logwage ~ age + education, data = Wage)
plot(1:9, adj_r2, type="b",xlab="Stopinje prostosti naravnega zlepka",ylab="Prilagojeni R2")
modeli <- list(model.stopnja1, model.ns3, model.ns4, model.ns5,
model.ns6, model.ns7, model.ns8, model.ns9, model.ns10)
adj_r2 <- sapply(modeli, function(m) summary(m)$adj.r.squared)
plot(1:9, adj_r2, type="b",xlab="Stopinje prostosti naravnega zlepka",ylab="Prilagojeni R2")
napovedi.ns3 <- data.frame(age = age.nap, education = "1. < HS Grad")
napovedi.ns3 <- cbind(napovedi.ns3, predict(model.ns3, newdata = napovedi.ns3, interval = "confidence"))
napovedi.ns4 <- data.frame(age = age.nap, education = "1. < HS Grad")
napovedi.ns4 <- cbind(napovedi.ns4, predict(model.ns3, newdata = napovedi.ns4, interval = "confidence"))
napovedi.ns5 <- data.frame(age = age.nap, education = "1. < HS Grad")
napovedi.ns5 <- cbind(napovedi.ns5, predict(model.ns3, newdata = napovedi.ns5, interval = "confidence"))
napovedi.ns6 <- data.frame(age = age.nap, education = "1. < HS Grad")
napovedi.ns6 <- cbind(napovedi.ns6, predict(model.ns3, newdata = napovedi.ns6, interval = "confidence"))
napovedi.ns7 <- data.frame(age = age.nap, education = "1. < HS Grad")
napovedi.ns7 <- cbind(napovedi.ns7, predict(model.ns3, newdata = napovedi.ns7, interval = "confidence"))
napovedi.ns8 <- data.frame(age = age.nap, education = "1. < HS Grad")
napovedi.ns8 <- cbind(napovedi.ns8, predict(model.ns3, newdata = napovedi.ns8, interval = "confidence"))
napovedi.ns9 <- data.frame(age = age.nap, education = "1. < HS Grad")
napovedi.ns9 <- cbind(napovedi.ns9, predict(model.ns3, newdata = napovedi.ns9, interval = "confidence"))
napovedi.ns10 <- data.frame(age = age.nap, education = "1. < HS Grad")
napovedi.ns10 <- cbind(napovedi.ns10, predict(model.ns3, newdata = napovedi.ns10, interval = "confidence"))
modeli <- list(model.stopnja1, model.ns3, model.ns4, model.ns5,
model.ns6, model.ns7, model.ns8, model.ns9, model.ns10)
adj_r2 <- sapply(modeli, function(m) summary(m)$adj.r.squared)
plot(1:9, adj_r2, type="b",xlab="Stopinje prostosti naravnega zlepka",ylab="Prilagojeni R2")
summary(model.ns4)
plot(Wage$age, Wage$logwage, col ="gray", xlab="Starost", ylab="log(Plača)")
lines(age.nap, napovedi.ns4[,"fit"], col="blue", lwd=2)
abline(v=c(min(Wage$age), attr(ns(Wage$age, df = 8),"knots"), max(Wage$age)), col="blue", lty=2)
matlines(age.nap, napovedi.ns4[, c("lwr","upr")], lwd = 1, col = "blue", lty = 2)
plot(Wage$age, Wage$logwage, col ="gray", xlab="Starost", ylab="log(Plača)")
lines(age.nap, napovedi.ns4[,"fit"], col="blue", lwd=2)
abline(v=c(min(Wage$age), attr(ns(Wage$age, df = 8) + education,"knots"), max(Wage$age)), col="blue", lty=2)
plot(Wage$age, Wage$logwage, col ="gray", xlab="Starost", ylab="log(Plača)")
lines(age.nap, napovedi.ns4[,"fit"], col="blue", lwd=2)
abline(v=c(min(Wage$age), attr(ns(Wage$age, df = 8,"knots"), max(Wage$age)), col="blue", lty=2)
matlines(age.nap, napovedi.ns4[, c("lwr","upr")], lwd = 1, col = "blue", lty = 2)
plot(Wage$age, Wage$logwage, col ="gray", xlab="Starost", ylab="log(Plača)")
lines(age.nap, napovedi.ns4[,"fit"], col="blue", lwd=2)
abline(v=c(min(Wage$age), attr(ns(Wage$age, df = 8),"knots"), max(Wage$age)), col="blue", lty=2)
matlines(age.nap, napovedi.ns4[, c("lwr","upr")], lwd = 1, col = "blue", lty = 2)
summary(model.ns4)
rm(list = ls())
library(vtable) # summary table
library(kableExtra) # creates nice latex tables
library(corrplot) # correlation plot
library(car) # regression
library(reshape2) # reshape data sets for ggplot (melt)
library(ggplot2) # nice plots (ggplot)
library(knitr)  # for markdown
library(leaps) # best subset
library(glmnet) # lasso
library(mgcv) # gam
library(summarytools) # summary table
library(ISLR2)
library(splines)
train_set <- read.table("bejzbol_train.txt", header=TRUE)
setwd("C:/Users/Uporabnik/Desktop/Magisterij/Linearni_modeli/git/LinearniModeli/2024_25")
train_set <- read.table("bejzbol_train.txt", header=TRUE)
train_set$Salary <- log(train_set$Salary)
best_subset = regsubsets(Salary ~. , data = train_set, nvmax = 19)
par(mfrow=c(1,1))
plot(best_subset, scale = "Cp") # cp je isto kot AIC
best_subset_summary = summary(best_subset)
final_subset = train_set[, c("Salary", "Runs", "Walks", "Years", "CRuns", "CWalks", "NewLeague", "Division")]
model = lm(Salary~Runs + Walks + Years + CRuns + CWalks + NewLeague + Division, final_subset)
m_s3 <- lm(Salary ~ ns(Runs, df = 3) + ns(Walks, df = 3) + ns(Years, df = 3) +
ns(CRuns, df = 3) + ns(CWalks, df = 3) +
NewLeague + Division, data = final_subset)
m_s4 <- lm(Salary ~ ns(Runs, df = 4) + ns(Walks, df = 4) + ns(Years, df = 4) +
ns(CRuns, df = 4) + ns(CWalks, df = 4) +
NewLeague + Division, data = final_subset)
m_s5 <- lm(Salary ~ ns(Runs, df = 5) + ns(Walks, df = 5) + ns(Years, df = 5) +
ns(CRuns, df = 5) + ns(CWalks, df = 5) +
NewLeague + Division, data = final_subset)
m_s6 <- lm(Salary ~ ns(Runs, df = 6) + ns(Walks, df = 6) + ns(Years, df = 6) +
ns(CRuns, df = 6) + ns(CWalks, df = 6) +
NewLeague + Division, data = final_subset)
m_s7 <- lm(Salary ~ ns(Runs, df = 7) + ns(Walks, df = 7) + ns(Years, df = 7) +
ns(CRuns, df = 7) + ns(CWalks, df = 7) +
NewLeague + Division, data = final_subset)
m_s8 <- lm(Salary ~ ns(Runs, df = 8) + ns(Walks, df = 8) + ns(Years, df = 8) +
ns(CRuns, df = 8) + ns(CWalks, df = 8) +
NewLeague + Division, data = final_subset)
AIC(model, m_s3,m_s4,m_s5,m_s6, m_s7, m_s8)
model_i = lm(Salary~Runs + Walks + Years + CRuns + CWalks + NewLeague + Division, final_subset)
m_s3_i <- lm(Salary ~ ns(Runs, df = 3) * ns(Walks, df = 3) * ns(Years, df = 3) *
ns(CRuns, df = 3) * ns(CWalks, df = 3) *
NewLeague * Division, data = final_subset)
m_s4_i <- lm(Salary ~ ns(Runs, df = 4) * ns(Walks, df = 4) * ns(Years, df = 4) *
ns(CRuns, df = 4) * ns(CWalks, df = 4) *
NewLeague * Division, data = final_subset)
m_s5_i <- lm(Salary ~ ns(Runs, df = 5) * ns(Walks, df = 5) * ns(Years, df = 5) *
ns(CRuns, df = 5) * ns(CWalks, df = 5) *
NewLeague * Division, data = final_subset)
m_s6_i <- lm(Salary ~ ns(Runs, df = 6) * ns(Walks, df = 6) * ns(Years, df = 6) *
ns(CRuns, df = 6) * ns(CWalks, df = 6) *
NewLeague * Division, data = final_subset)
m_s7_i <- lm(Salary ~ ns(Runs, df = 7) * ns(Walks, df = 7) * ns(Years, df = 7) *
ns(CRuns, df = 7) * ns(CWalks, df = 7) *
NewLeague * Division, data = final_subset)
m_s8_i <- lm(Salary ~ ns(Runs, df = 8) * ns(Walks, df = 8) * ns(Years, df = 8) *
ns(CRuns, df = 8) * ns(CWalks, df = 8) *
NewLeague * Division, data = final_subset)
AIC(model_i, m_s3_i,m_s4_i,m_s5_i,m_s6_i, m_s7_i, m_s8_i)
AIC(model, m_s3,m_s4,m_s5,m_s6, m_s7, m_s8)
model_koncni = m_s7
saveRDS(model_koncni, "dn5_vaje\MATJAZ.rds")
saveRDS(model_koncni, "dn5_vaje\\MATJAZ.rds")
setwd("C:/Users/Uporabnik/Desktop/Magisterij/Linearni_modeli/git/LinearniModeli/2024_25")
train_set <- read.table("bejzbol_train.txt", header=TRUE)
