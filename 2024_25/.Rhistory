#                  Gender : Smoke + Gender : Ht + Smoke : Ht +
#                  Gender : Smoke : Ht, data=lungcap)
par(mfrow=c(2,2))
plot(mod3.int)
summary(mod3.int)
# Pogledamo ali so interakcije sploh pomembne
# H0: b4 = b5 = b6 = b7 = 0
anova(mod3, mod3.int)
# yi = b0 + b1*wgi + b2*wsi + b3*Ht + b4*wg:ws + b5*wg:Ht + b6*ws:Ht + b7*wg:ws:Ht + epsi
# Pogledamo ali so interakcije sploh pomembne
# H0: b4 = b5 = b6 = b7 = 0
anova(mod3, mod3.int)
plot(Effect(c("Ht","Gender","Smoke"), mod3.int, partial.residuals=TRUE), main="")
plot(Effect(c("Ht", "Smoke","Gender"), mod3.int), multiline=TRUE,
ci.style="band", main="")
ggplot(lungcap, aes(x=Age, y=FEV))+ geom_point() + geom_smooth(se=FALSE) +
facet_grid(Smoke~ Gender) + xlab("Starost (dopolnjena leta)") +
ylab("Pljučna kapaciteta (L)") + theme_bw()
mod1 <- lm(FEV ~ Age + Ht + Gender + Smoke, data=lungcap)
head(model.matrix(mod1))  # prvih šet vrstic modelske matrike X
tail(model.matrix(mod1))  # zadnjih šest vrstic modelske matrike X
par(mfrow=c(2,2), oma = c(0, 0, 3, 0))
plot(mod1)
ggplot(lungcap, aes(x=Age, y=log(FEV)))+ geom_point() + geom_smooth(se=FALSE) +
facet_grid(Smoke~ Gender) + xlab("Starost (dopolnjena leta)") +
ylab("log(Pljučna kapaciteta (L))") + theme_bw()
ggplot(lungcap, aes(x=Ht, y=log(FEV)))+ geom_point() + geom_smooth(se=FALSE) +
facet_grid(Smoke~ Gender) + xlab("Telesna višina (cm)") +
ylab("log(Pljučna kapaciteta (L))") + theme_bw()
mod2 <- lm(log(FEV) ~ Age + Ht + Gender + Smoke, data=lungcap)
par(mfrow=c(2,2), oma = c(0, 0, 3, 0))
plot(mod2)
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
R -q -e "install.packages('xfun')"
install.packages('xfun')
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
knitr::opts_chunk$set(echo = TRUE)
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
library(ggplot2)
library(ggpubr)
library(GLMsData)
library(effects)
library(emmeans)
library(car)
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
mod2.int <- lm(log(FEV) ~ Age*Ht*Gender*Smoke, data=lungcap)
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=FALSE), main="")
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
install.packages(c("cli", "digest", "fastmap", "htmltools", "RcppArmadillo", "rlang", "yaml"))
plot(mod.opisna)
plot(mod3.int)
par(mfrow=c(2,2))
plot(mod3.int)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
set.seed(64220387)
velikost_testa = function(hts = FALSE, n_sim = 1000, n = 50, alpha = 0.05, beta_0 = 0, beta_1 = 0) {
rejections = 0
for (i in 1:n_sim) {
x = runif(n, 0, 10)
if (hts) {
eps = rnorm(n, mean = 0, sd = 0.5 + 0.1 * x)
} else {
eps = rnorm(n)
}
y = beta_0 + beta_1 * x + eps
model = lm(y ~ x)
p_value = summary(model)$coefficients[2, 4]
if (p_value < alpha) {
rejections = rejections + 1
}
}
return(rejections / n_sim)
}
velikost_homoskedasticnost = velikost_testa(hts = FALSE, beta_0 = 5) # beta_0 nima vpliva na rezultat
velikost_heteroskedasticnost = velikost_testa(hts = TRUE, beta_0 = 5)
cat("Velikost testa (homoskedastičnost):", size_homoskedastic, "\n")
set.seed(64220387)
velikost_testa = function(hts = FALSE, n_sim = 1000, n = 50, alpha = 0.05, beta_0 = 0, beta_1 = 0) {
rejections = 0
for (i in 1:n_sim) {
x = runif(n, 0, 10)
if (hts) {
eps = rnorm(n, mean = 0, sd = 0.5 + 0.1 * x)
} else {
eps = rnorm(n)
}
y = beta_0 + beta_1 * x + eps
model = lm(y ~ x)
p_value = summary(model)$coefficients[2, 4]
if (p_value < alpha) {
rejections = rejections + 1
}
}
return(rejections / n_sim)
}
velikost_homoskedasticnost = velikost_testa(hts = FALSE, beta_0 = 5) # beta_0 nima vpliva na rezultat
velikost_heteroskedasticnost = velikost_testa(hts = TRUE, beta_0 = 5)
cat("Velikost testa (homoskedastičnost):", velikost_homoskedasticnost, "\n")
cat("Velikost testa (heteroskedastičnost):", velikost_heteroskedasticnost, "\n")
set.seed(1)
velikost_testa = function(hts = FALSE, n_sim = 1000, n = 50, alpha = 0.05, beta_0 = 0, beta_1 = 0) {
rejections = 0
for (i in 1:n_sim) {
x = runif(n, 0, 10)
if (hts) {
eps = rnorm(n, mean = 0, sd = 0.5 + 0.1 * x)
} else {
eps = rnorm(n)
}
y = beta_0 + beta_1 * x + eps
model = lm(y ~ x)
p_value = summary(model)$coefficients[2, 4]
if (p_value < alpha) {
rejections = rejections + 1
}
}
return(rejections / n_sim)
}
velikost_homoskedasticnost = velikost_testa(hts = FALSE, beta_0 = 5) # beta_0 nima vpliva na rezultat
velikost_heteroskedasticnost = velikost_testa(hts = TRUE, beta_0 = 5)
rez <- data.frame(Predpostavka = c("Homoskedastičnost", "Heteroskedastičnost"), "Velikost testa" = c(velikost_homoskedasticnost, velikost_heteroskedasticnost))
kable(rez, caption = "Vpliv heteroskedastičnosti na velikost testa")
library(knitr)
set.seed(1)
velikost_testa = function(hts = FALSE, n_sim = 1000, n = 50, alpha = 0.05, beta_0 = 0, beta_1 = 0) {
rejections = 0
for (i in 1:n_sim) {
x = runif(n, 0, 10)
if (hts) {
eps = rnorm(n, mean = 0, sd = 0.5 + 0.1 * x)
} else {
eps = rnorm(n)
}
y = beta_0 + beta_1 * x + eps
model = lm(y ~ x)
p_value = summary(model)$coefficients[2, 4]
if (p_value < alpha) {
rejections = rejections + 1
}
}
return(rejections / n_sim)
}
velikost_homoskedasticnost = velikost_testa(hts = FALSE, beta_0 = 5) # beta_0 nima vpliva na rezultat
velikost_heteroskedasticnost = velikost_testa(hts = TRUE, beta_0 = 5)
rez <- data.frame(Predpostavka = c("Homoskedastičnost", "Heteroskedastičnost"), "Velikost testa" = c(velikost_homoskedasticnost, velikost_heteroskedasticnost))
kable(rez, caption = "Vpliv heteroskedastičnosti na velikost testa")
set.seed(0)
velikost_testa = function(hts = FALSE, n_sim = 1000, n = 50, alpha = 0.05, beta_0 = 0, beta_1 = 0) {
rejections = 0
for (i in 1:n_sim) {
x = runif(n, 0, 10)
if (hts) {
eps = rnorm(n, mean = 0, sd = 0.5 + 0.1 * x)
} else {
eps = rnorm(n)
}
y = beta_0 + beta_1 * x + eps
model = lm(y ~ x)
p_value = summary(model)$coefficients[2, 4]
if (p_value < alpha) {
rejections = rejections + 1
}
}
return(rejections / n_sim)
}
velikost_homoskedasticnost = velikost_testa(hts = FALSE, beta_0 = 5) # beta_0 nima vpliva na rezultat
velikost_heteroskedasticnost = velikost_testa(hts = TRUE, beta_0 = 5)
rez <- data.frame(Predpostavka = c("Homoskedastičnost", "Heteroskedastičnost"), "Velikost testa" = c(velikost_homoskedasticnost, velikost_heteroskedasticnost))
kable(rez, caption = "Vpliv heteroskedastičnosti na velikost testa")
set.seed(2)
velikost_testa = function(hts = FALSE, n_sim = 1000, n = 50, alpha = 0.05, beta_0 = 0, beta_1 = 0) {
rejections = 0
for (i in 1:n_sim) {
x = runif(n, 0, 10)
if (hts) {
eps = rnorm(n, mean = 0, sd = 0.5 + 0.1 * x)
} else {
eps = rnorm(n)
}
y = beta_0 + beta_1 * x + eps
model = lm(y ~ x)
p_value = summary(model)$coefficients[2, 4]
if (p_value < alpha) {
rejections = rejections + 1
}
}
return(rejections / n_sim)
}
velikost_homoskedasticnost = velikost_testa(hts = FALSE, beta_0 = 5) # beta_0 nima vpliva na rezultat
velikost_heteroskedasticnost = velikost_testa(hts = TRUE, beta_0 = 5)
rez <- data.frame(Predpostavka = c("Homoskedastičnost", "Heteroskedastičnost"), "Velikost testa" = c(velikost_homoskedasticnost, velikost_heteroskedasticnost))
kable(rez, caption = "Vpliv heteroskedastičnosti na velikost testa")
set.seed(1)
velikost_testa = function(hts = FALSE, n_sim = 1000, n = 50, alpha = 0.05, beta_0 = 0, beta_1 = 0) {
stev_zavrnitev = 0
for (i in 1:n_sim) {
x = runif(n, 0, 10)
if (hts) {
eps = rnorm(n, mean = 0, sd = 0.5 + 0.1 * x)
} else {
eps = rnorm(n)
}
y = beta_0 + beta_1 * x + eps
model = lm(y ~ x)
p_value = summary(model)$coefficients[2, 4]
if (p_value < alpha) {
stev_zavrnitev += 1
set.seed(1)
velikost_testa = function(hts = FALSE, n_sim = 1000, n = 50, alpha = 0.05, beta_0 = 0, beta_1 = 0) {
stev_zavrnitev = 0
for (i in 1:n_sim) {
x = runif(n, 0, 10)
if (hts) {
eps = rnorm(n, mean = 0, sd = 0.5 + 0.1 * x)
} else {
eps = rnorm(n)
}
y = beta_0 + beta_1 * x + eps
model = lm(y ~ x)
p_value = summary(model)$coefficients[2, 4]
if (p_value < alpha) {
stev_zavrnitev = stev_zavrnitev + 1
}
}
return(cnt / n_sim)
}
velikost_homoskedasticnost = velikost_testa(hts = FALSE, beta_0 = 5) # beta_0 nima vpliva na rezultat
set.seed(1)
velikost_testa = function(hts = FALSE, n_sim = 1000, n = 50, alpha = 0.05, beta_0 = 0, beta_1 = 0) {
stev_zavrnitev = 0
for (i in 1:n_sim) {
x = runif(n, 0, 10)
if (hts) {
eps = rnorm(n, mean = 0, sd = 0.5 + 0.1 * x)
} else {
eps = rnorm(n)
}
y = beta_0 + beta_1 * x + eps
model = lm(y ~ x)
p_value = summary(model)$coefficients[2, 4]
if (p_value < alpha) {
stev_zavrnitev = stev_zavrnitev + 1
}
}
return(stev_zavrnitev / n_sim)
}
velikost_homoskedasticnost = velikost_testa(hts = FALSE, beta_0 = 5) # beta_0 nima vpliva na rezultat
velikost_heteroskedasticnost = velikost_testa(hts = TRUE, beta_0 = 5)
rez <- data.frame(Predpostavka = c("Homoskedastičnost", "Heteroskedastičnost"), "Velikost testa" = c(velikost_homoskedasticnost, velikost_heteroskedasticnost))
kable(rez, caption = "Vpliv heteroskedastičnosti na velikost testa")
set.seed(5)
velikost_testa = function(hts = FALSE, n_sim = 1000, n = 50, alpha = 0.05, beta_0 = 0, beta_1 = 0) {
stev_zavrnitev = 0
for (i in 1:n_sim) {
x = runif(n, 0, 10)
if (hts) {
eps = rnorm(n, mean = 0, sd = 0.5 + 0.1 * x)
} else {
eps = rnorm(n)
}
y = beta_0 + beta_1 * x + eps
model = lm(y ~ x)
p_value = summary(model)$coefficients[2, 4]
if (p_value < alpha) {
stev_zavrnitev = stev_zavrnitev + 1
}
}
return(stev_zavrnitev / n_sim)
}
velikost_homoskedasticnost = velikost_testa(hts = FALSE, beta_0 = 5) # beta_0 nima vpliva na rezultat
velikost_heteroskedasticnost = velikost_testa(hts = TRUE, beta_0 = 5)
rez <- data.frame(Predpostavka = c("Homoskedastičnost", "Heteroskedastičnost"), "Velikost testa" = c(velikost_homoskedasticnost, velikost_heteroskedasticnost))
kable(rez, caption = "Vpliv heteroskedastičnosti na velikost testa")
set.seed(64220387)
velikost_testa = function(hts = FALSE, n_sim = 1000, n = 50, alpha = 0.05, beta_0 = 0, beta_1 = 0) {
stev_zavrnitev = 0
for (i in 1:n_sim) {
x = runif(n, 0, 10)
if (hts) {
eps = rnorm(n, mean = 0, sd = 0.5 + 0.1 * x)
} else {
eps = rnorm(n)
}
y = beta_0 + beta_1 * x + eps
model = lm(y ~ x)
p_value = summary(model)$coefficients[2, 4]
if (p_value < alpha) {
stev_zavrnitev = stev_zavrnitev + 1
}
}
return(stev_zavrnitev / n_sim)
}
velikost_homoskedasticnost = velikost_testa(hts = FALSE, beta_0 = 5) # beta_0 nima vpliva na rezultat
velikost_heteroskedasticnost = velikost_testa(hts = TRUE, beta_0 = 5)
rez <- data.frame(Predpostavka = c("Homoskedastičnost", "Heteroskedastičnost"), "Velikost testa" = c(velikost_homoskedasticnost, velikost_heteroskedasticnost))
kable(rez, caption = "Vpliv heteroskedastičnosti na velikost testa")
rm(list = ls())
setwd("C:/Users/UrbanMatjaz/OneDrive - IN516HT D.O.O/Desktop/FAKS/Linearni modeli/git/LinearniModeli/2024_25/predavanje_4")
setwd("C:/Users/UrbanMatjaz/OneDrive - IN516HT D.O.O/Desktop/FAKS/Linearni modeli/git/LinearniModeli/2024_25")
postaje<-read.table("POSTAJE.txt", header=TRUE, sep="\t")
str(postaje)
head(postaje)
summary(postaje)
rownames(postaje)<-postaje$Postaja
rownames(postaje)[is.na(postaje$x.gdol)]
rownames(postaje)[is.na(postaje$y.gsir)]
postaje <- postaje[postaje$Postaja != "Kredarica",]
# koordinate geografske dolžine in širine izrazimo v km
postaje$x <- postaje$x.gdol/1000
postaje$y <- postaje$y.gsir/1000
# izločimo dve postaji, ki nimata podatka za geografsko dolžino
postaje <- na.omit(postaje)
dim(postaje)
# za grafični prikaz
library(car)
scatterplot(padavine ~ x, regLine = FALSE, smooth = FALSE, boxplots = 'xy',
xlab = c("Geografska dolžina (km)"), ylab = c("Padavine (mm)"),
data = postaje, pch = 16,
id = list(n = 2, location = "lr")) # id = TRUE
par(mfrow = c(1, 1))
symbox(~padavine, xlab= "Lambda", ylab="Transformirane vrednosti za padavine",
data=postaje)
summary(powerTransform(model.1))
boxCox(model.1)
model.1 <- lm(padavine~x, data=postaje)
par(mfrow = c(2, 2), oma=c(0,0,3,0))
plot(model.1)
model.1 <- lm(padavine~x, data=postaje)
par(mfrow = c(2, 2), oma=c(0,0,3,0))
plot(model.1)
par(mfrow = c(2, 2))
plot(model.1)
plot(model.1)
par(mfrow = c(2, 2))
par(mfrow = c(2, 2))
plot(model.1)
model.1 <- lm(padavine~x, data=postaje)
par(mfrow = c(2, 2))
plot(model.1)
rm(model.1)
View(postaje)
postaje<-read.table("POSTAJE.txt", header=TRUE, sep="\t")
model.1 <- lm(padavine~x, data=postaje)
postaje <- postaje[postaje$Postaja != "Kredarica",]
# koordinate geografske dolžine in širine izrazimo v km
postaje$x <- postaje$x.gdol/1000
postaje$y <- postaje$y.gsir/1000
# izločimo dve postaji, ki nimata podatka za geografsko dolžino
postaje <- na.omit(postaje)
dim(postaje)
model.1 <- lm(padavine~x, data=postaje)
par(mfrow = c(2, 2))
plot(model.1)
par(mfrow = c(1, 1))
symbox(~padavine, xlab= "Lambda", ylab="Transformirane vrednosti za padavine",
data=postaje)
summary(powerTransform(model.1))
boxCox(model.1)
model.2 <- lm(1/padavine~x, data=postaje)
par(mfrow = c(2, 2), oma=c(0,0,3,0))
plot(model.2)
par(mfrow = c(1, 2))
with(postaje, plot(x, padavine, pch = 16))
with(postaje, plot(z.nv, padavine, pch = 16))
model.m1 <- lm(padavine ~ x + z.nv, data = postaje)
par(mfrow = c(2, 2), oma = c(0, 0, 3, 0))
plot(model.m1)
avPlots(model.m1, ylim = c(-1000, 1500), id = list(location = "avoid"))
summary(mdoel.m1)
summary(model.m1)
plot(Effect(c("z.nv", "x"), model.m1, partial.residuals = TRUE),
ci.style = "none", lattice = list(layout = c(4, 1)))
library(Effect)
library(Effects)
library(effects)
plot(Effeffectsplot(Effect(c("z.nv", "x"), model.m1, partial.residuals = TRUE),
plot(Effect(c("x","z.nv"), model.m1, partial.residuals = TRUE),
ci.style = "none", lattice = list(layout = c(4, 1)))
plot(Effplot(Effplot(Effect(c("z.nv", "x"), model.m1, partial.residuals = TRUE),
plot(Effect(c("x","z.nv"), model.m1, partial.residuals = TRUE),
ci.style = "none", lattice = list(layout = c(4, 1)))
plot(Effect(c("z.nv", "x"), model.m1, partial.residuals = TRUE),
ci.style = "none", lattice = list(layout = c(4, 1)))
plot(Effect(c("x","z.nv"), model.m1, partial.residuals = TRUE),
ci.style = "none", lattice = list(layout = c(4, 1)))
model.m2 <- lm(padavine ~ z.nv + x + z.nv:x , data = postaje)
model.matrix(model.m2)
plot(Effect(c("z.nv", "x"), model.m2, partial.residuals = TRUE),
ci.style = "none", lattice = list(layout = c(4, 1)))
plot(Effect(c("x","z.nv"), model.m2, partial.residuals = TRUE),
ci.style = "none", lattice = list(layout = c(4, 1)))
par(mfrow = c(2, 2), oma = c(0, 0, 3, 0))
plot(model.m2)
avPlots(model.m2, ylim = c(-1000, 600), id = list(location = "avoid"))
outlierTest(model.m2)
View(postaje)
model.m2$coeff
summary(model.m2)$r.squared
# napovedi modela
plot(predictorEffects(model.m2, ~.,xlevels = list(x = 4, z.nv = c(250, 500, 750, 1500))),
rows = 2, cols = 1, main = "", layout = c(4,1))
kovine0<-read.table("KOVINE.txt", header=TRUE, sep="\t")
kovine0$razdalja<-kovine0$razdalja.m/1000
# izločimo vzorčne točke z oddaljenostjo več kot 10 km
kovine<-kovine0[kovine0$razdalja<10,]
dim(kovine)
summary(kovine[,c("Pb","razdalja")])
scatterplot(Pb~razdalja, regLine=F, xlab="Razdalja (km)",
ylab="Pb (mg/kg)", smooth=list(span=0.5, spread=FALSE),
boxplots='xy', data=kovine, pch=16)
scatterplot(log(Pb)~razdalja, regLine=F, smooth=list(span=0.5, spread=FALSE),
xlab="Razdalja (km)", ylab="log(Pb)",
boxplots='xy', data=kovine, pch=16)
model.Pb <- lm(log(Pb)~razdalja, data=kovine)
par(mfrow = c(2, 2),  oma = c(0, 0, 2, 0))
plot(model.Pb)
par(mfrow = c(2, 2),  oma = c(0, 0, 2, 0))
plot(model.Pb)
par(mfrow = c(1, 1))
influencePlot(model.Pb, id.n=2)
outlierTest(model.Pb)
outlierTest(model.Pb)
summary(model.Pb)
confint(model.Pb)
(b <- coefficients(model.Pb))
# antilogaritmiranje ocen parametrov za povprečno napoved pri cinkarni
# in za relativno spremembo Pb z razdaljo ter pripadajoči 95 % IZ
exp(b[1])
exp(confint(model.Pb)[2,])-1
exp(b[2])-1
exp(confint(model.Pb)[1,])
exp(b[2])-1
exp(b[2])-1
#  grafični prikaz napovedi s paketom effects
library(lattice)
library(effects)
plot(Effect(c("razdalja"), model.Pb), ci.style = "bands", main = "",
xlab = "Razdalja (km)", ylab = "log(Pb)")
plot(Effect(c("razdalja"), model.Pb,
transformation = list(link = log, inverse = exp)),
axes = list(y = list(lab = "Pb (mg/kg)", type = "response")),
ci.style = "bands", main = "", xlab = "Razdalja (km)")
# podatke najdemo v paketu MASS v podatkovnem okviru mammals
library(MASS)
data(mammals)
summary(mammals)
scatterplot(brain ~ body, regLine = FALSE, smooth = FALSE,
id = list(method = 'mahal', n = 3), boxplots = 'xy',
xlab = "Masa telesa (kg)",
ylab = "Masa možganov (g)", pch = 16, data = mammals)
scatterplot(log10(brain) ~ log10(body), regLine = FALSE,
smooth = list(span = 0.5, spread = FALSE),
id = list(method = 'mahal', n = 3), boxplots = 'xy',
xlab = "log10(body)", ylab = "log10(brain)", pch = 16,
data = mammals)
scatterplot(log10(brain) ~ log10(body), regLine = FALSE,
smooth = list(span = 0.5, spread = FALSE),
id = list(method = 'mahal', n = 3), boxplots = 'xy',
xlab = "log10(body)", ylab = "log10(brain)", pch = 16,
data = mammals)
model.m <- lm(log10(brain) ~ log10(body), data = mammals)
par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
plot(model.m)
outlierTest(model.m)
outlierTest(model.m)
par(mfrow = c(1, 1))
influencePlot(model.m, xlab = "Vzvodi", ylab = "Studentizirani ostanki",
id = list(n = 3, location = "avoid"))
summary(model.m)
confint(model.m)
andy <- read.table("ANDY.txt", header = TRUE)
str(andy)
# višino dreves izrazimo v metrih
andy$height <- andy$height/3.2808
andy$buckets <- factor(andy$buckets)
summary(andy)
ggplot(data = andy, aes(x = age, y = height, col = buckets)) +
geom_point() + xlab("Starost (leta)") + ylab("Visina dreves (m)")
library(ggplot2)
ggplot(data = andy, aes(x = age, y = height, col = buckets)) +
geom_point() + xlab("Starost (leta)") + ylab("Visina dreves (m)")
mod.OLS <- lm(height ~ age * buckets, data = andy)
par(mfrow = c(2, 2))
plot(mod.OLS)
utez <- andy %>% group_by(age) %>%
summarise(w = 1/var(height))
library(dplyr)
utez <- andy %>% group_by(age) %>%
summarise(w = 1/var(height))
utez
andy <- merge(andy, utez, by = "age")
par(mfrow = c(1, 1))
plot(andy$age, andy$w, pch = 16, type = c("b"))
View(andy)
mod.WLS <- lm(height ~ age * buckets, weights = w, data = andy)
par(mfrow = c(2, 2))
plot(mod.WLS)
par(mfrow = c(1, 1))
plot(fitted(mod.WLS), rstandard(mod.WLS), xlab = "Prilagojene vrednosti",
ylab = "Standardizirani ostanki")
abline(h = 0)
anova(mod.WLS)
anova(mod.OLS)
summary(mod.WLS)
anova(mod.WLS)
plot(Effect(c("buckets"), mod.WLS), main = "", ylim = c(0, 16))
plot(Effect(c("buckets", "age"), mod.WLS), main = "", multiline = TRUE,
ci.style = "band", ylim = c(0, 16))
