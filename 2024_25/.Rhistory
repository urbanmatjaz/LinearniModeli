a1 = a1 + 1
}
}
else{
xstar[i] = 3
if(pai[i] == 0){
vzorec[3,1] = vzorec[3,1] +1
countY[3,1] = countY[3,1]+1
sumsY[3,1] = sumsY[3,1] + yStr1[a0]
a0 = a0 + 1
}
else{
vzorec[3,2] = vzorec[3,2] +1
countY[3,2] = countY[3,2]+1
sumsY[3,2] = sumsY[3,2] + yStr2[a1]
a1 = a1 + 1
}
}
}
df = data.frame("X" = x, "Y" = yPop, "A" = pai, "XStar" = xstar)
yPop = y
yPop[which(pai == 1)] = yPop*2
weights = populacija/vzorec
df = data.frame("X" = x, "Y" = yPop, "A" = pai, "XStar" = xstar)
design <- svydesign(ids = ~1, data = df, weights = ~1)
popMarginsX = data.frame(XStar = c(1, 2, 3), Freq = c(0.22, 0.52, 0.26))
popMarginsA = data.frame(A = c("0", "1"), Freq = c(0.50, 0.50))
vzMarginsX = data.frame(XStar = c(1, 2, 3), Freq = c(0.318, 0.34, 0.342))
vzMarginsA = data.frame(A = c("0", "1"), Freq = c(0.59, 0.41))
rakedData = rake(design, sample.margins = list(~XStar, ~A), population.margins = list(popMarginsX, popMarginsA))
rakedData
rake(design, sample.margins = list(~XStar, ~A), population.margins = list(popMarginsX, popMarginsA))
weights(rakeData)
weights(rakedData)
rakingUtezi = weights(rakedData)
View(rakedData)
sum(weights(data.svy.rake))
sum(weights(rakedData))
rm(list = ls())
library(knitr)
set.seed(7)
a = rnorm(100, 3, 0.3)
x = NULL
for(i in a){
x = c(x, rnorm(10, i, 1.1))
}
X = data.frame(matrix(x, ncol = length(a)))
b1 = 0.9
eps = rnorm(length(x), 0, 0.1)
y = b1*x + eps
Y = data.frame(matrix(y, ncol = length(a)))
pa = rnorm(100, 0.4, 0.25)
pai = NULL
for(i in 1:length(pa)){
p = round(pa[i]*10)
if(p<0)
p = 0
else if(p>10)
p = 10
tmp = c(rep(1, p), rep(0, (10-p)))
tmp = sample(tmp)
pai = c(pai, tmp)
}
A = data.frame(matrix(pai, ncol = length(pa)))
N = 1000
Nh1 = N*mean(pai)
Nh2 = N-Nh1
Str1 = x[1:Nh1]
Str2 = x[(Nh1+1):length(y)]
yStr1 = y[1:(N-Nh1)]
yStr2 = y[(N-Nh1+1):length(y)] * 2
countY = data.frame("A0" = c(0,0,0), "A1" = c(0,0,0))
sumsY = data.frame("A0" = c(0,0,0), "A1" = c(0,0,0))
vzorec = data.frame("A0" = c(0,0,0), "A1" = c(0,0,0))
a0 = 1
a1 = 1
for(i in 1:length(x)){
if(x[i] < 2.5){
if(pai[i] == 0){
vzorec[1,1] = vzorec[1,1]+1
countY[1,1] = countY[1,1]+1
sumsY[1,1] = sumsY[1,1] + yStr1[a0]
a0 = a0 + 1
}
else{
vzorec[1,2] = vzorec[1,2]+1
countY[1,2] = countY[1,2]+1
sumsY[1,2] = sumsY[1,2] + yStr2[a1]
a1 = a1 + 1
}
}
else if (x[i] >= 2.5 & x[i] < 3.5){
if(pai[i] == 0){
vzorec[2,1] = vzorec[2,1]+1
countY[2,1] = countY[2,1]+1
sumsY[2,1] = sumsY[2,1] + yStr1[a0]
a0 = a0 + 1
}
else{
vzorec[2,2] = vzorec[2,2]+1
countY[2,2] = countY[2,2]+1
sumsY[2,2] = sumsY[2,2] + yStr2[a1]
a1 = a1 + 1
}
}
else{
if(pai[i] == 0){
vzorec[3,1] = vzorec[3,1] +1
countY[3,1] = countY[3,1]+1
sumsY[3,1] = sumsY[3,1] + yStr1[a0]
a0 = a0 + 1
}
else{
vzorec[3,2] = vzorec[3,2] +1
countY[3,2] = countY[3,2]+1
sumsY[3,2] = sumsY[3,2] + yStr2[a1]
a1 = a1 + 1
}
}
}
populacija = data.frame("A0" = c(140,200,150), "A1" = c(80,320,110))
vzorecMargins = data.frame(rbind(cbind(vzorec, rowSums(vzorec)), c(colSums(vzorec), 1000)))
colnames(vzorecMargins) = c('A0', "A1", "Margins")
rownames(vzorecMargins) = c('1', "2", "3", "Margins")
kable(vzorecMargins, caption = "Vzorec")
populacijaMargins = rbind(cbind(populacija, rowSums(populacija)), c(colSums(populacija), 1000))
colnames(populacijaMargins) = c('A0', "A1", "Margins")
rownames(populacijaMargins) = c('1', "2", "3", "Margins")
kable(populacijaMargins, caption = "Populacija")
povpY = data.frame(sumsY/countY)
kable(povpY, caption = "Povprecje Y")
weights1 = NULL
for(i in 1:3){
weights1[i] = (sum(populacija[i,]))/(sum(vzorec[i,]))
}
kable(weights1)
step1 = data.frame(vzorec * weights1)
step1Margins = data.frame(rbind(cbind(rbind(cbind(step1, rowSums(step1)), c(colSums(step1), NA)), c(rowSums(populacija), NA)), c(colSums(populacija), NA, 1000)))
colnames(step1Margins) = c('A0', "A1", "Margins", "Pricakovana (Populacijska) vrednost")
rownames(step1Margins) = c('1', "2", "3", "Margins", "Pricakovana (Populacijska) vrednost")
kable(step1Margins, caption = "Margine na 1. koraku")
povpYRaking = povpY * weights1
kable(povpYRaking, caption = "Povprecje Y")
weights2 = c(sum(populacija[,1])/sum(step1[,1]), sum(populacija[,2])/sum(step1[,2]))
kable(weights2)
step2 = data.frame(step1[,1]*weights2[1], step1[,2]*weights2[2])
step2Margins = data.frame(rbind(cbind(rbind(cbind(step2, rowSums(step2)), c(colSums(step2), NA)), c(rowSums(populacija), NA)), c(colSums(populacija), NA, 1000)))
colnames(step2Margins) = c('A0', "A1", "Margins", "Pricakovana (Populacijska) vrednost")
rownames(step2Margins) = c('1', "2", "3", "Margins", "Pricakovana (Populacijska) vrednost")
kable(step2Margins, caption = "Margine na 2. koraku")
povpYRaking = data.frame(povpYRaking[,1] * weights2[1], povpYRaking[,2] * weights2[2])
kable(povpYRaking, caption = "Povprecje Y")
weights3 = NULL
for(i in 1:3){
weights3[i] = (sum(populacija[i,]))/(sum(step2[i,]))
}
kable(weights3)
step3 = data.frame(step2 * weights3)
step3Margins = data.frame(rbind(cbind(rbind(cbind(step3, rowSums(step3)), c(colSums(step3), NA)), c(rowSums(populacija), NA)), c(colSums(populacija), NA, 1000)))
colnames(step3Margins) = c('A0', "A1", "Margins", "Pricakovana (Populacijska) vrednost")
rownames(step3Margins) = c('1', "2", "3", "Margins", "Pricakovana (Populacijska) vrednost")
kable(step3Margins, caption = "Margine na 3. koraku")
povpYRaking = povpYRaking * weights3
kable(povpYRaking, caption = "Povprecje Y")
finalUtezi = populacija/step3
kable(finalUtezi*1000/sum(finalUtezi))
poststratifikacijaUtezi = populacija/vzorec
kable(poststratifikacijaUtezi)
kable(povpY, caption = "Povprecje Y")
povpYPost = povpY * poststratifikacijaUtezi
kable(povpYPost)
kable(poststratifikacijaUtezi*1000/sum(poststratifikacijaUtezi))
kable(abs(povpY - povpYRaking))
kable(abs(povpY - povpYPost))
data.frame("Abs razlika Raking" = sum(abs(povpY - povpYRaking)),"Abs razlika poststratifikacije" = sum(abs(povpY - povpYPost)))
nUtezi = 6
uteziRaking = c(finalUtezi[,1], finalUtezi[,2])
uteziPost = c(poststratifikacijaUtezi[,1], poststratifikacijaUtezi[,2])
vwRaking = nUtezi * (1/(nUtezi-1)) * sum((uteziRaking-mean(uteziRaking))^2) # nUtezi * var(uteziRaking)
vwPost = nUtezi * var(uteziPost)
cvRaking = sqrt(vwRaking)/sum(uteziRaking) * sqrt(nUtezi)
cvPost = sqrt(vwPost)/sum(uteziPost) * sqrt(nUtezi)
VIFRaking = 1+cvRaking^2
VIFPost = 1+cvPost^2
kable(data.frame("VIF-Raking" = VIFRaking, "VIF-Poststratifikacija" = VIFPost))
kable(weights1)
kable(povpYRaking, caption = "Povprecje Y")
kable(weights2)
kable(poststratifikacijaUtezi*1000/sum(poststratifikacijaUtezi))
View(povpY)
View(populacija)
View(vzorec)
View(povpYPost)
View(povpYRaking)
View(populacijaMargins)
View(vzorecMargins)
kable(populacijaMargins, caption = "Populacija")
View(povpYPost)
kable(poststratifikacijaUtezi*1000/sum(poststratifikacijaUtezi))
View(countY)
mean(povpY)/mean(povpYPost)
povpY
povpYPost
mean(povpYPost)
mean(as.numeric(povpYPost))
mean(as.matrix(povpY))
mean(as.matrix(povpY))/mean(as.matrix(povpYPost))
mean(as.matrix(povpYPost))/mean(as.matrix(povpY))
mean(as.matrix(povpYRaking))/mean(as.matrix(povpY))
relDif = data.frame(mean(as.matrix(povpYPost))/mean(as.matrix(povpY)), mean(as.matrix(povpYRaking))/mean(as.matrix(povpY)))
colnames(relDif) = c("Rel. razlika Poststratifikacija", "Rel. razlika Raking")
kable(relDif)
mean(as.matrix(povpYPost))-mean(as.matrix(povpY))
bias^2 + var(y)
bias = mean(as.matrix(povpYPost))-mean(as.matrix(povpY))
bias^2 + var(y)
var(y) * VIFPost
bias = mean(as.matrix(povpYPost))-mean(as.matrix(povpY))
MSEBias = bias^2 + var(y)
MSEWOBias = var(y) * VIFPost
df = data.frame("bias" = bias, "MSE - utezen" = MSEBias, "MSE - neutezen" = MSEWOBias)
kable(df)
biasPost = mean(as.matrix(povpYPost))-mean(as.matrix(povpY))
MSEBias = bias^2 + var(y)
MSEWOBias = var(y) * VIFPost
df = data.frame("bias" = biasPost, "MSE - utezen" = MSEBias, "MSE - neutezen" = MSEWOBias)
kable(df)
library(knitr)
biasPost = mean(as.matrix(povpYPost))-mean(as.matrix(povpY))
MSEBias = bias^2 + var(y)
MSEWOBias = var(y) * VIFPost
df = data.frame("bias" = biasPost, "MSE - utezen" = MSEBias, "MSE - neutezen" = MSEWOBias)
kable(df)
mean(as.matrix(povpYRaking))-mean(as.matrix(povpY))
mean(as.matrix(povpYPost))-mean(as.matrix(povpY))
biasRaking^2 + var(y)
biasRaking = mean(as.matrix(povpYRaking))-mean(as.matrix(povpY))
biasRaking^2 + var(y)
MSEBias
var(y) * VIFRaking
MSEWOBiasRaking = var(y) * VIFRaking
df = data.frame("MSE - utezen Raking" = MSERaking, "MSE - neutezen Raking" = MSEWOBiasRaking, "MSE - neutezen Poststratifikacija" = MSEWOBias)
MSERaking = biasRaking^2 + var(y)
df = data.frame("bias" = biasRaking, "MSE - utezen" = MSERaking, "MSE - neutezen" = MSEWOBias)
kable(df)
MSEWOBiasRaking = var(y) * VIFRaking
df = data.frame("MSE - utezen Raking" = MSERaking, "MSE - neutezen Raking" = MSEWOBiasRaking, "MSE - neutezen Poststratifikacija" = MSEWOBias)
kable(df)
dbeta(sequ, shape1 = 5, shape2 = 1)
dbeta(seq(0,1,by = 0.001), shape1 = 5, shape2 = 1)
plot(dbeta(seq(0,1,by = 0.001), shape1 = 5, shape2 = 1))
curve(dbeta(seq(0,1,by = 0.001), shape1 = 5, shape2 = 1))
curve(dbeta(x, shape1 = 5, shape2 = 1))
curve(dbeta(seq(0,1,by = 0.001), shape1 = 5, shape2 = 1), type = "l")
plot(dbeta(seq(0,1,by = 0.001), shape1 = 5, shape2 = 1), type = "l")
plot(dbeta(seq(0,1,by = 0.01), shape1 = 5, shape2 = 1), type = "l")
knitr::opts_chunk$set(echo = TRUE)
par(mfrow=c(2,2))
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
library(ggplot2)
library(ggpubr)
library(GLMsData)
library(effects)
library(emmeans)
library(car)
data(lungcap)
str(lungcap)
summary(lungcap)
par(mfrow=c(2,2))
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
mod2.int <- lm(log(FEV) ~ Age*Ht*Gender*Smoke, data=lungcap)
par(mfrow=c(2,2))
plot(mod2.int)
summary(mod2.int)
# Ht, telesna višina v cm
lungcap$Ht <- lungcap$Ht*2.54
#  Smoke naj bo faktor z vrednostma "Ne" in "Da"
lungcap$Smoke <- factor(lungcap$Smoke, labels=c("Ne", "Da"))
levels(lungcap$Gender)
# zamenjamo oznaki za spol za grafične prikaze
levels(lungcap$Gender) <- c("Ženske", "Moški")
mod2.int <- lm(log(FEV) ~ Age*Ht*Gender*Smoke, data=lungcap)
par(mfrow=c(2,2))
plot(mod2.int)
summary(mod2.int)
par(mfrow=c(2,2))
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
plot(mod2.int)
par(mfrow=c(2,2))
plot(mod2.int)
anova(mod2.int)
par(mfrow=c(1,1))
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
lungcap
rm(list = ls())
data(lungcap)
View(lungcap)
lungcap$Ht <- lungcap$Ht*2.54
lungcap$Smoke <- factor(lungcap$Smoke, labels=c("Ne", "Da"))
levels(lungcap$Gender)
levels(lungcap$Gender) <- c("Ženske", "Moški")
mod2.int <- lm(log(FEV) ~ Age*Ht*Gender*Smoke, data=lungcap)
par(mfrow=c(2,2))
plot(mod2.int)
anova(mod2.int)
par(mfrow=c(1,1))
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
par(mfrow=c(2,2))
plot(mod2.int)
par(mfrow=c(1,1))
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
plot(Effect(c("Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
"Age",
plot(Effect(c("Age","Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
plot(Effect(c("Ht","Gender","Smoke"), mod2.int, partial.residuals=TRUE), main="")
rm(list = ls())
getData = function(beta_3, n = 100, beta_0 = 10, beta_1 = 0.5, beta_2 = 0.15, sigma = 10) {
set.seed(1)
x1 = runif(n, 50, 100)
x2 = runif(n, 50, 100)
eps = rnorm(n, mean = 0, sd = sigma)
y = beta_0 + beta_1 * x1 + beta_2 * x2 + beta_3 * x1 * x2 + eps
data.frame(x1 = x1, x2 = x2, y = y)
}
beta_3_values = c(0, 0.05, 0.5)
data_list = lapply(beta_3_values, generate_data)
getData = function(beta_3, n = 100, beta_0 = 10, beta_1 = 0.5, beta_2 = 0.15, sigma = 10) {
set.seed(1)
x1 = runif(n, 50, 100)
x2 = runif(n, 50, 100)
eps = rnorm(n, mean = 0, sd = sigma)
y = beta_0 + beta_1 * x1 + beta_2 * x2 + beta_3 * x1 * x2 + eps
data.frame(x1 = x1, x2 = x2, y = y)
}
beta_3_values = c(0, 0.05, 0.5)
data_list = lapply(beta_3_values, getData)
lapply(data_list, head)
View(data_list)
rm(data_list)
i = 1
for (b in beta_3_values) {
data_list[i] = getData(b)
i = i + 1
}
data_list = numeric()
i = 1
for (b in beta_3_values) {
data_list[i] = getData(b)
i = i + 1
}
View(data_list)
getData = function(beta_3, n = 100, beta_0 = 10, beta_1 = 0.5, beta_2 = 0.15, sigma = 10) {
set.seed(1)
x1 = runif(n, 50, 100)
x2 = runif(n, 50, 100)
eps = rnorm(n, mean = 0, sd = sigma)
y = beta_0 + beta_1 * x1 + beta_2 * x2 + beta_3 * x1 * x2 + eps
data.frame(x1 = x1, x2 = x2, y = y)
}
beta_3_values = c(0, 0.05, 0.5)
data_list = lapply(beta_3_values, getData)
View(data_list)
rm(data_list)
data = lapply(beta_3_values, getData)
rm(i)
rm(b)
data_list[[2]]
rm(data)
data_list = lapply(beta_3_values, getData)
data_list[[2]]
data_list[[3]]
data_list[[3]] - data_list[[2]]
data_1 <- data_list[[1]]
model_1 <- lm(y ~ x1 + x2, data = data)
data_1 <- data_list[[1]]
model_1 <- lm(y ~ x1 + x2, data = data_1)
data_2 <- data_list[[2]]
model_2 <- lm(y ~ x1 + x2, data = data_2)
data_3 <- data_list[[3]]
model_3 <- lm(y ~ x1 + x2, data = data_3)
summary(model_1)
summary(model_1)
plot(model_1)
par(mfrow = c(2, 2))
plot(model_1)
avPlots(model_1)
library(car)
avPlots(model_1)
crPlots(model_1)
summary(model_2)
plot(model_2)
avPlots(model_2)
crPlots(model_2)
summary(model_3)
plot(model_3)
plot(model_2)
plot(model_3)
avPlots(model_3)
crPlots(model_3)
plot(model_1)
plot(model_2)
knitr::opts_chunk$set(echo = TRUE)
library(car)
summary(model_3)
summary(model_1)
summary(model_1)
summary(model_2)
plot(model_1)
par(mfrow = c(2, 2))
plot(model_1)
avPlots(model_1)
crPlots(model_1)
plot(model_1)
model_2 <- lm(y ~ x1 + x2, data = data_2)
plot(model_2)
par(mfrow = c(2, 2))
plot(model_2)
avPlots(model_2)
library(car)
avPlots(model_2)
crPlots(model_2)
plot(model_2)
model_2 <- lm(y ~ x1 * x2, data = data_2)
model_3 <- lm(y ~ x1 * x2, data = data_3)
plot(model_2)
avPlots(model_2)
crPlots(model_2)
plot(model_2)
avPlots(model_2)
summary(model_2)
summary(model_3)
plot(model_3)
avPlots(model_3)
crPlots(model_3)
par(mfrow = c(1, 1))
plot(model_3)
plot(model_3)
par(mfrow = c(2, 2))
plot(model_3)
data_snowgeese <- read.table("SNOWGEESE.txt", header = TRUE)
setwd("C:/Users/Uporabnik/Desktop/Magisterij/Linearni_modeli/git/LinearniModeli/2024_25")
data_snowgeese <- read.table("SNOWGEESE.txt", header = TRUE)
head(data)
head(data_snowgeese)
plot(data$obs2, data$photo,
xlab = "Observed Geese (obs2)",
ylab = "Actual Geese (photo)",
main = "Scatter Plot of Actual vs Observed Geese",
pch = 19, col = "blue")
plot(data_snowgeese$obs2, data_snowgeese$photo,
xlab = "Observed Geese (obs2)",
ylab = "Actual Geese (photo)",
main = "Scatter Plot of Actual vs Observed Geese",
pch = 19, col = "blue")
par(mfrow = c(1, 1))
plot(data_snowgeese$obs2, data_snowgeese$photo,
xlab = "Observed Geese (obs2)",
ylab = "Actual Geese (photo)",
main = "Scatter Plot of Actual vs Observed Geese",
pch = 19, col = "blue")
plot(data_snowgeese$obs2, data_snowgeese$photo,
xlab = "obs2",
ylab = "photo",
main = "Odvisnost photo od obs2",
pch = 19, col = "blue")
abline(lm(photo ~ obs2, data = data_snowgeese), col = "red")
model.goske <- lm(photo ~ obs2, data = data)
model.goske <- lm(photo ~ obs2, data = data_snowgeese)
summary(model.goske)
par(mfrow = c(2, 2))
plot(model.goske)
model.goske.log <- lm(log(photo) ~ log(obs2), data = data_snowgeese)
summary(model.goske.log)
par(mfrow = c(2, 2))
plot(model.goske.log)
outlierTest(model.goske.log)
influencePlot(model.goske.log,
id = list(method = "noteworthy", n = 2, cex = 1, location = "lr"),
xlab = "Vzvodi", ylab = "Studentizirani ostanki")
par(mfrow = c(1, 1))
influencePlot(model.goske.log,
id = list(method = "noteworthy", n = 2, cex = 1, location = "lr"),
xlab = "Vzvodi", ylab = "Studentizirani ostanki")
View(data_snowgeese)
plot(data_snowgeese$obs2, hatvalues(model.goske.log), pch = 16,
xlab = c("napovedna_spr (enota)"), ylab = c("Vzvod"))
vplivne = lm.influence(model.goske.log)
names(vplivne)
sort(vplivne$hat, decreasing = TRUE)[1:4] # 4 točke z največjimi vzvodi
influencePlot(model.goske.log,
id = list(method = "noteworthy", n = 2, cex = 1, location = "lr"),
xlab = "Vzvodi", ylab = "Studentizirani ostanki")
sort(vplivne$hat, decreasing = TRUE)[1:4] # 4 točke z največjimi vzvodi
View(data_snowgeese)
summary(model.goske.log)
confint(model.goske.log)
exp(confint(model)[2,])-1
exp(confint(model.goske.log)[2,])-1
exp(confint(model.goske.log)[1,])
View(data_snowgeese)
exp(confint(model.goske.log)[2,])-1
kovine0<-read.table("KOVINE.txt", header=TRUE, sep="\t")
kovine0$razdalja<-kovine0$razdalja.m/1000
# izločimo vzorčne točke z oddaljenostjo več kot 10 km
kovine<-kovine0[kovine0$razdalja<10,]
dim(kovine)
summary(kovine[,c("Pb","razdalja")])
model.Pb <- lm(log(Pb)~razdalja, data=kovine)
exp(confint(model.Pb)[2,])-1
exp(confint(model.goske.log)[2,])-1
exp(confint(model.goske.log)[2,])
