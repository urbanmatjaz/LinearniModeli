setwd("C:/Users/UrbanMatjaz/OneDrive - IN516HT D.O.O/Desktop/FAKS/Linearni modeli/git/LinearniModeli/2024_25/vaja_6")
knitr::opts_chunk$set(echo = TRUE, comment = "",
fig.align = 'center',
fig.width = 5,
fig.height = 4,
warning = FALSE,
message = FALSE)
library(ISLR2) # datasets
library(ggplot2) # nice plots (ggplot)
library(knitr)  # for markdown
library(leaps) # best subset
library(mgcv) # gam
data("Hitters")
Hitters <- na.omit(Hitters)
set.seed(123)
train <- sample(1:nrow(Hitters), round(2/3*nrow(Hitters)), replace=F)
train_set <- Hitters[train, ]
test_set <- Hitters[-train, ]
train_set$Salary <- log(train_set$Salary)
test_set$Salary <- log(test_set$Salary)
gam_mod <- gam(Salary ~ AtBat + Hits + HmRun + Runs + RBI + Walks +
s(Years, bs = "cs") + s(CAtBat, bs = "cs") +
s(CHits, bs = "cs") + CHmRun +
s(CRuns, bs = "cs") + s(CRBI, bs = "cs") +
s(CWalks, bs = "cs") + League + Division + PutOuts +
Assists + Errors + NewLeague,
method="REML", data=train_set)
summary(gam_mod)
gam_mod_2 <- gam(Salary ~ s(AtBat, bs = "cs") + s(Hits, bs = "cs") +
s(HmRun, bs = "cs") + s(Runs, bs = "cs") +
s(RBI, bs = "cs") + s(Walks, bs = "cs") +
s(Years, bs = "cs") + s(CAtBat, bs = "cs") +
s(CHits, bs = "cs") + s(CHmRun, bs= "cs") +
s(CRuns, bs = "cs") + s(CRBI, bs = "cs") +
s(CWalks, bs = "cs") + League + Division +
s(PutOuts, bs = "cs") + s(Assists, bs = "cs") +
s(Errors, bs = "cs") + NewLeague,
method="REML", data=train_set)
summary(gam_mod_2)
AIC(gam_mod, gam_mod_2)
m0 <- lm(Salary~., data=train_set)
best_subset = regsubsets(Salary ~. , data = train_set, nvmax = 19)
bwd_sel = regsubsets(Salary ~., data = train_set, nvmax = 19, method = "backward")
fwd_sel = regsubsets(Salary ~., data = train_set, nvmax = 19, method = "forward")
predict.regsubsets <- function(object, newdata, id){
form = as.formula(object$call[[2]]) # formula modela
mat = model.matrix(form, newdata) #modelska matrika
coefi = coef(object, id=id) #ocenjeni parametri modela
xvars = names(coefi)
mat[,xvars]%*%coefi
}
preds_m0 <- predict(m0, newdata = test_set)
preds_best_subset_cp <- predict(best_subset, newdata = test_set, id = 7)
preds_best_subset_adjr2 <- predict(best_subset, newdata = test_set, id = 11)
preds_bwd_sel <- predict(bwd_sel, newdata = test_set, id = 6)
preds_fwd_sel <- predict(fwd_sel, newdata = test_set, id = 7)
preds_cv5 <- predict(best_subset, newdata = test_set, id = 2)
#napovedi na podlagi gam:
preds_gam <- predict(gam_mod, test_set)
#napovedi na podlagi gam_2:
preds_gam_2 <- predict(gam_mod_2, test_set)
preds <- list(preds_m0, preds_best_subset_cp, preds_best_subset_adjr2,
preds_bwd_sel, preds_fwd_sel, preds_cv5, preds_gam, preds_gam_2)
modeli <- c("Polni model", "Best subset (Cp)", "Best subset (Adj R2)",
"Izbira nazaj (Cp)", "Izbira naprej", "Best subset (5x CV)", "Moj GAM", "Auto GAM")
#iz lista v dolgi format
preds_long <- data.frame(dejanske=rep(test_set$Salary, length(modeli)),
napovedi=unlist(preds),
method=rep(modeli, each=nrow(test_set)))
preds_long$method <- factor(preds_long$method, levels=modeli)
ggplot(preds_long, aes(y = dejanske, x = napovedi)) +
geom_point() +
theme_bw() +
geom_abline(aes(colour="Idealni", slope=1, intercept=0), linetype = "dashed") +
geom_smooth(method = "lm", se = FALSE, aes(colour = "Dejanski")) +
geom_smooth(method = "loess", color = "black", se = TRUE, fill = "gray", alpha = 0.3) +
scale_colour_manual(name="Naklon", values=c("darkgrey", "red")) +
ylab("Dejanske vrednosti") +
xlab("Napovedi za log(Salary)") +
facet_wrap(~method, ncol=2) +
theme(legend.position = "top")
#iz lista v dolgi format
preds_long_2 <- data.frame(preds=c(test_set$Salary, unlist(preds)),
method=c(rep("Dejanske", nrow(test_set)),
rep(modeli, each=nrow(test_set))))
preds_long_2$method <- factor(preds_long_2$method, levels=c("Dejanske", modeli))
ggplot(preds_long_2, aes(x = method, y = preds)) +
geom_boxplot() +
theme_bw() +
ylab("log(Salary)") +
xlab("") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(preds_long, aes(x=dejanske, y=dejanske-napovedi)) +
geom_point() +
facet_wrap( ~ method, scale = "fixed", nrow=4) +
geom_smooth(method="loess") +
ylab("Ostanki")+
xlab("Dejanske vrednosti log(Salary) v testnem vzorcu")
ggplot(preds_long, aes(x=dejanske, y=abs(dejanske-napovedi))) +
geom_point() +
facet_wrap( ~ method, scale = "fixed", nrow=4) +
geom_smooth(method="loess") +
ylab("Absolutni ostanki")+
xlab("Dejanske vrednosti log(Salary) v testnem vzorcu")
primerjava.modelov <- matrix(NA, length(modeli), 4)
colnames(primerjava.modelov) <- c("Splošna kalibracija", "Naklon kalibracije", "R2", "RMSE")
rownames(primerjava.modelov) <- modeli
for(i in 1:length(preds)){
primerjava.modelov[i, "Splošna kalibracija"] <- mean(test_set$Salary - preds[[i]], na.rm=TRUE)
# coef(lm(Salary~offset(preds[[i]]), data=test_set))
primerjava.modelov[i, "Naklon kalibracije"] <- coef(lm(test_set$Salary ~ preds[[i]]))[2]
primerjava.modelov[i, "R2"] <- cor(test_set$Salary, preds[[i]], use="complete.obs")^2
primerjava.modelov[i, "RMSE"] <- sqrt(mean((test_set$Salary - preds[[i]])^2, na.rm=TRUE))
}
kable(primerjava.modelov, digits = 3, caption = "Kakovost posameznega napovednega modela.")
#funkcija za grafični prikaz rezultatov
plotcomp <- function(kriterij="R2", main=kriterij, xrange=c(0,1),
legendx=NULL, fun=function(x) x, negative=FALSE){
sta <- fun(primerjava.modelov[,kriterij])
sta <- sta[order(sta)]
if(negative) sta <- sta[order(-sta)]
barplot(sta, horiz=TRUE, xlim=xrange, ylab="", axes=F, axisnames=F)
axis(1)
if(is.null(legendx)) for(i in 1:length(sta)) text(sta[i]+0.02, y=i*1.2-0.4,
names(sta)[i], adj=0, cex=0.7)
else for(i in 1:length(sta)) text(legendx, y=i*1.2-0.4, names(sta)[i], adj=0)
title(main=main)
}
par(mfrow=c(2,2))
plotcomp(kriterij="R2", xrange=c(0, 1.1))
plotcomp(kriterij="Naklon kalibracije", xrange=c(0,1.8))
plotcomp(kriterij="Splošna kalibracija", xrange=c(-0.15, 0.15), legendx=0.005)
plotcomp(kriterij="RMSE", negative=TRUE, xrange=c(0, 1.2))
Hitters$Salary <- log(Hitters$Salary)
bwd_sel_vsi = regsubsets(Salary ~., data = Hitters, nvmax = 19, method = "backward")
bwd_sel_vsi_summary <- summary(bwd_sel_vsi)
preds_vsi <- predict(bwd_sel_vsi, newdata = Hitters, id = which.min(bwd_sel_vsi_summary$cp))
which.min(bwd_sel_vsi_summary$cp)
(navidezni_c_spl <- mean(Hitters$Salary - preds_vsi, na.rm=TRUE))
(navidezni_c_nakl <- coef(lm(Hitters$Salary ~ preds_vsi))[2])
(navidezni_R2 <- cor(Hitters$Salary, preds_vsi, use="complete.obs")^2)
(navidezni_rmse <- sqrt(mean((Hitters$Salary - preds_vsi)^2, na.rm=TRUE)))
set.seed(23345)
B=500
opt_c_spl <- opt_c_nakl <- opt_R2 <- opt_rmse <- numeric(B)
for(b in 1:B) {
ind <- sample(1:nrow(Hitters), replace=TRUE) # indikator enot v bootstrap vzorcu
my.data.boot <- Hitters[ind, ] # bootstrap vzorec
my.mod.boot <- regsubsets(Salary ~., data = my.data.boot, nvmax = 19,
method = "backward") # izbira nazaj na bootstrap vzorcu
#napovedi na boot učnem vzorcu
preds_boot <- predict(my.mod.boot, newdata = my.data.boot,
id = which.min(summary(my.mod.boot)$cp))
#napovedi na originalnih podatkih
preds_orig <- predict(my.mod.boot, newdata = Hitters,
id = which.min(summary(my.mod.boot)$cp))
#bootstrap performance
c_spl.boot <- mean(my.data.boot$Salary - preds_boot, na.rm=TRUE) #=0
c_nakl.boot <- coef(lm(my.data.boot$Salary ~ preds_boot))[2] #=1
R2.boot <- cor(my.data.boot$Salary, preds_boot, use="complete.obs")^2
rmse.boot <- sqrt(mean((my.data.boot$Salary - preds_boot)^2, na.rm=TRUE))
#test performance
c_spl.test <- mean(Hitters$Salary - preds_orig, na.rm=TRUE)
c_nakl.test <- coef(lm(Hitters$Salary ~ preds_orig))[2]
R2.test <- cor(Hitters$Salary, preds_orig, use="complete.obs")^2
rmse.test <- sqrt(mean((Hitters$Salary - preds_orig)^2, na.rm=TRUE))
#optimism za b bootstrap vzorec
opt_c_spl[b]=c_spl.boot-c_spl.test
opt_c_nakl[b]=c_nakl.boot-c_nakl.test
opt_R2[b]=R2.boot-R2.test
opt_rmse[b]=rmse.boot-rmse.test
}
popravljeni_c_spl <- navidezni_c_spl - mean(opt_c_spl)
popravljeni_c_nakl <- navidezni_c_nakl - mean(opt_c_nakl)
popravljeni_R2 <- navidezni_R2 - mean(opt_R2)
popravljeni_rmse <- navidezni_rmse - mean(opt_rmse)
primerjava.vrednotenja <- data.frame(Navidezni = c(navidezni_c_spl, navidezni_c_nakl,
navidezni_R2, navidezni_rmse),
Popravljeni = c(popravljeni_c_spl, popravljeni_c_nakl,
popravljeni_R2, popravljeni_rmse),
Testni = primerjava.modelov["Izbira nazaj (Cp)", ])
kable(primerjava.vrednotenja, digits = 3,
caption = "Primerjava načinov vrednotenja za strategijo izbire modela z izbiro nazaj.")
