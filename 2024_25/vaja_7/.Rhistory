oceneBinom = c(oceneBinom,varBinom(vzorecBinom))}
return(c(ocenePoiss, oceneBinom)) #vrnemo povprecno vrednost ocen
vzorecPoiss = rpois(n = n,lambda = lambda)
n = 100
lambda = c(1,10,20)
#funkcija za izračun variance binomske porazdelitve
varBinom = function(x){
return(var(x))
}
#funkcija za izračun variance Poissonove porazdelitve
varPoiss = function(x){
return(var(x))
}
simVar= function(n, lambda){
ocenePoiss = NULL
oceneBinom = NULL
for(i in 1:100){
vzorecPoiss = rpois(n = n,lambda = lambda) # generiramo vzorec
ocenePoiss = c(ocenePoiss,varPoiss(vzorecPoiss))} # izracunamo cenilko, jo dodamo v vektor
vzorecBinom = rbinom(n = lambda, N, lambda/N) # generiramo vzorec
oceneBinom = c(oceneBinom,varBinom(vzorecBinom))}
return(c(ocenePoiss, oceneBinom)) #vrnemo povprecno vrednost ocen
View(simVar)
n = 100
lambda = c(1,10,20)
#funkcija za izračun variance binomske porazdelitve
varBinom = function(x){
return(var(x))
}
#funkcija za izračun variance Poissonove porazdelitve
varPoiss = function(x){
return(var(x))
}
simVar= function(n, lambda){
ocenePoiss = NULL
oceneBinom = NULL
for(i in 1:100){
vzorecPoiss = rpois(n = n,lambda = lambda) # generiramo vzorec
ocenePoiss = c(ocenePoiss,varPoiss(vzorecPoiss))} # izracunamo cenilko, jo dodamo v vektor
vzorecBinom = rbinom(n = lambda, N, lambda/N) # generiramo vzorec
oceneBinom = c(oceneBinom,varBinom(vzorecBinom))
return(c(ocenePoiss, oceneBinom)) #vrnemo povprecno vrednost ocen
}
#funkcija za izpis tabele s primerjavo varianc obeh porazdelitev
for(i in lambda){
simVar(n, i)
}
n = 100
lambda = c(1,10,20)
#funkcija za izračun variance binomske porazdelitve
varBinom = function(x){
return(var(x))
}
#funkcija za izračun variance Poissonove porazdelitve
varPoiss = function(x){
return(var(x))
}
simVar= function(n, lambda){
ocenePoiss = NULL
oceneBinom = NULL
for(i in 1:100){
vzorecPoiss = rpois(n = n,lambda = lambda) # generiramo vzorec
ocenePoiss = c(ocenePoiss,varPoiss(vzorecPoiss))} # izracunamo cenilko, jo dodamo v vektor
vzorecBinom = rbinom(n = lambda, n, lambda/n) # generiramo vzorec
oceneBinom = c(oceneBinom,varBinom(vzorecBinom))
return(c(ocenePoiss, oceneBinom)) #vrnemo povprecno vrednost ocen
}
#funkcija za izpis tabele s primerjavo varianc obeh porazdelitev
for(i in lambda){
simVar(n, i)
}
n = 100
lambda = c(1,10,20)
#funkcija za izračun variance binomske porazdelitve
varBinom = function(x){
return(var(x))
}
#funkcija za izračun variance Poissonove porazdelitve
varPoiss = function(x){
return(var(x))
}
simVar= function(n, lambda){
ocenePoiss = NULL
oceneBinom = NULL
for(i in 1:100){
vzorecPoiss = rpois(n = n,lambda = lambda) # generiramo vzorec
ocenePoiss = c(ocenePoiss,varPoiss(vzorecPoiss))} # izracunamo cenilko, jo dodamo v vektor
vzorecBinom = rbinom(n = lambda, n, lambda/n) # generiramo vzorec
oceneBinom = c(oceneBinom,varBinom(vzorecBinom))
return(c(ocenePoiss, oceneBinom)) #vrnemo povprecno vrednost ocen
}
#funkcija za izpis tabele s primerjavo varianc obeh porazdelitev
primerjave = NULL
for(i in lambda){
primerjave = c(primerjave,simVar(n, i))
}
primerjave
n = 100
lambda = c(1,10,20)
#funkcija za izračun variance binomske porazdelitve
varBinom = function(x){
return(var(x))
}
#funkcija za izračun variance Poissonove porazdelitve
varPoiss = function(x){
return(var(x))
}
simVar= function(n, lambda){
ocenePoiss = NULL
oceneBinom = NULL
for(i in 1:100){
vzorecPoiss = rpois(n = n,lambda = lambda) # generiramo vzorec
ocenePoiss = c(ocenePoiss,varPoiss(vzorecPoiss)) # izracunamo cenilko, jo dodamo v vektor
vzorecBinom = rbinom(n = lambda, n, lambda/n) # generiramo vzorec
oceneBinom = c(oceneBinom,varBinom(vzorecBinom))
}
return(c(ocenePoiss, oceneBinom)) #vrnemo povprecno vrednost ocen
}
#funkcija za izpis tabele s primerjavo varianc obeh porazdelitev
primerjave = NULL
for(i in lambda){
primerjave = c(primerjave,simVar(n, i))
}
primerjave
n = 100
lambda = c(1,10,20)
#funkcija za izračun variance binomske porazdelitve
varBinom = function(x){
return(var(x))
}
#funkcija za izračun variance Poissonove porazdelitve
varPoiss = function(x){
return(var(x))
}
simVar= function(n, lambda){
ocenePoiss = NULL
oceneBinom = NULL
for(i in 1:100){
vzorecPoiss = rpois(n = n,lambda = lambda) # generiramo vzorec
ocenePoiss = c(ocenePoiss,varPoiss(vzorecPoiss)) # izracunamo cenilko, jo dodamo v vektor
vzorecBinom = rbinom(n = lambda, n, lambda/n) # generiramo vzorec
oceneBinom = c(oceneBinom,varBinom(vzorecBinom))
}
return(c(mean(ocenePoiss), mean(oceneBinom))) #vrnemo povprecno vrednost ocen
}
#funkcija za izpis tabele s primerjavo varianc obeh porazdelitev
primerjave = NULL
for(i in lambda){
primerjave = c(primerjave,simVar(n, i))
}
primerjave
n = 100
lambda = c(2,10,20)
#funkcija za izračun variance binomske porazdelitve
varBinom = function(x){
return(var(x))
}
#funkcija za izračun variance Poissonove porazdelitve
varPoiss = function(x){
return(var(x))
}
simVar= function(n, lambda){
ocenePoiss = NULL
oceneBinom = NULL
for(i in 1:100){
vzorecPoiss = rpois(n = n,lambda = lambda) # generiramo vzorec
ocenePoiss = c(ocenePoiss,varPoiss(vzorecPoiss)) # izracunamo cenilko, jo dodamo v vektor
vzorecBinom = rbinom(n = lambda, n, lambda/n) # generiramo vzorec
oceneBinom = c(oceneBinom,varBinom(vzorecBinom))
}
return(c(mean(ocenePoiss), mean(oceneBinom))) #vrnemo povprecno vrednost ocen
}
#funkcija za izpis tabele s primerjavo varianc obeh porazdelitev
primerjave = NULL
for(i in lambda){
primerjave = c(primerjave,simVar(n, i))
}
primerjave
n = 100
lambda = c(2,10,20)
#funkcija za izračun variance binomske porazdelitve
varBinom = function(x){
return(var(x))
}
#funkcija za izračun variance Poissonove porazdelitve
varPoiss = function(x){
return(var(x))
}
simVar= function(n, lambda){
ocenePoiss = NULL
oceneBinom = NULL
for(i in 1:10000){
vzorecPoiss = rpois(n = n,lambda = lambda) # generiramo vzorec
ocenePoiss = c(ocenePoiss,varPoiss(vzorecPoiss)) # izracunamo cenilko, jo dodamo v vektor
vzorecBinom = rbinom(n = lambda, n, lambda/n) # generiramo vzorec
oceneBinom = c(oceneBinom,varBinom(vzorecBinom))
}
return(c(mean(ocenePoiss), mean(oceneBinom))) #vrnemo povprecno vrednost ocen
}
#funkcija za izpis tabele s primerjavo varianc obeh porazdelitev
primerjave = NULL
for(i in lambda){
primerjave = c(primerjave,simVar(n, i))
}
primerjave
primerjave = matrix(primerjave, ncol = 2, byrow = TRUE)
View(primerjave)
k = 2
p = 6
faktor.n = c(10, 20, 50, 100, 1000)
faktor.r = seq(0.1, 0.9, 0.2)
faktor.w = seq(0.1, 0.9, 0.2)
m = 1000
zasnova = expand.grid(faktor.n, faktor.r, faktor.w, seq_len(length.out=m))
colnames(zasnova) = c("N", "R", "W", "sim")
no_cores = detectCores() - 1
library(ggplot2)
library(MASS)
library(doParallel)
install.packages('doparallel')
install.packages('doParallel')
install.packages('doRNG')
library(ggplot2)
library(MASS)
library(doParallel)
library(psych)
k = 2
p = 6
faktor.n = c(10, 20, 50, 100, 1000)
faktor.r = seq(0.1, 0.9, 0.2)
faktor.w = seq(0.1, 0.9, 0.2)
m = 1000
zasnova = expand.grid(faktor.n, faktor.r, faktor.w, seq_len(length.out=m))
colnames(zasnova) = c("N", "R", "W", "sim")
no_cores = detectCores() - 1
cl = makeCluster(no_cores)
registerDoParallel(cl)
registerDoRNG(2023)
library(doRNG)
k = 2
p = 6
faktor.n = c(10, 20, 50, 100, 1000)
faktor.r = seq(0.1, 0.9, 0.2)
faktor.w = seq(0.1, 0.9, 0.2)
m = 1000
zasnova = expand.grid(faktor.n, faktor.r, faktor.w, seq_len(length.out=m))
colnames(zasnova) = c("N", "R", "W", "sim")
no_cores = detectCores() - 1
cl = makeCluster(no_cores)
registerDoParallel(cl)
registerDoRNG(2023)
rezultat = foreach(i=1:nrow(zasnova), .combine=rbind) %dopar% {
n = zasnova[i, "N"]
r = zasnova[i, "R"]
w = zasnova[i, "W"]
sim = zasnova[i, "sim"]
A = cbind(c(w,w,w,0,0,0),c(0,0,0,w,w,w))
SigmaF = matrix(c(1, r, r, 1), nrow = 2)
SigmaE = diag(1 - diag(A %*% SigmaF %*% t(A)))
FA = MASS::mvrnorm(n = n, mu = rep(0, times = k), Sigma = SigmaF)
E = MASS::mvrnorm(n = n, mu = rep(0, times = p), Sigma = SigmaE)
X = FA %*% t(A) + E
fa.fit = psych::fa(r=X, nfactors=k, rotate="varimax", scores=T, fm="ml")
fa_utezi = fa.fit$scores
pca.fit = psych::principal(r=X, nfactors=k, rotate="varimax", scores=T, method="pca")
pca_utezi = pca.fit$scores
#cor_FA = abs(cor(FA, fa_utezi))
#cor_FA_max = max(mean(diag(cor_FA)), mean(diag(cor_FA[nrow(cor_FA):1,])))
#cor_PCA = abs(cor(FA, pca_utezi))
#cor_PCA_max = max(mean(diag(cor_PCA)), mean(diag(cor_PCA[nrow(cor_PCA):1,])))
#cor_FA = abs(cor(c(FA), c(fa_utezi)))
#cor_PCA = abs(cor(c(FA), c(pca_utezi)))
#cor_FA = abs(FA - fa_utezi)
#cor_PCA = abs(FA - pca_utezi)
razlika_FA = abs(FA - fa_utezi)
razlika_PCA = abs(FA - pca_utezi)
df = data.frame(FA = razlika_FA, PCA = razlika_PCA)
razlika_FA = abs(df$FA.1 + df$FA.2)
razlika_PCA = abs(df$PCA.1 + df$PCA.2)
data.frame(N=n, R=r, W=w, FA=razlika_FA, PCA=razlika_PCA)
}
install.packages('psych')
install.packages('MASS')
install.packages("MASS")
library(ggplot2)
library(MASS)
library(doParallel)
library(psych)
library(doRNG)
k = 2
p = 6
faktor.n = c(10, 20, 50, 100, 1000)
faktor.r = seq(0.1, 0.9, 0.2)
faktor.w = seq(0.1, 0.9, 0.2)
m = 1000
zasnova = expand.grid(faktor.n, faktor.r, faktor.w, seq_len(length.out=m))
colnames(zasnova) = c("N", "R", "W", "sim")
no_cores = detectCores() - 1
cl = makeCluster(no_cores)
registerDoParallel(cl)
registerDoRNG(2023)
rezultat = foreach(i=1:nrow(zasnova), .combine=rbind) %dopar% {
n = zasnova[i, "N"]
r = zasnova[i, "R"]
w = zasnova[i, "W"]
sim = zasnova[i, "sim"]
A = cbind(c(w,w,w,0,0,0),c(0,0,0,w,w,w))
SigmaF = matrix(c(1, r, r, 1), nrow = 2)
SigmaE = diag(1 - diag(A %*% SigmaF %*% t(A)))
FA = MASS::mvrnorm(n = n, mu = rep(0, times = k), Sigma = SigmaF)
E = MASS::mvrnorm(n = n, mu = rep(0, times = p), Sigma = SigmaE)
X = FA %*% t(A) + E
fa.fit = psych::fa(r=X, nfactors=k, rotate="varimax", scores=T, fm="ml")
fa_utezi = fa.fit$scores
pca.fit = psych::principal(r=X, nfactors=k, rotate="varimax", scores=T, method="pca")
pca_utezi = pca.fit$scores
#cor_FA = abs(cor(FA, fa_utezi))
#cor_FA_max = max(mean(diag(cor_FA)), mean(diag(cor_FA[nrow(cor_FA):1,])))
#cor_PCA = abs(cor(FA, pca_utezi))
#cor_PCA_max = max(mean(diag(cor_PCA)), mean(diag(cor_PCA[nrow(cor_PCA):1,])))
#cor_FA = abs(cor(c(FA), c(fa_utezi)))
#cor_PCA = abs(cor(c(FA), c(pca_utezi)))
#cor_FA = abs(FA - fa_utezi)
#cor_PCA = abs(FA - pca_utezi)
razlika_FA = abs(FA - fa_utezi)
razlika_PCA = abs(FA - pca_utezi)
df = data.frame(FA = razlika_FA, PCA = razlika_PCA)
razlika_FA = abs(df$FA.1 + df$FA.2)
razlika_PCA = abs(df$PCA.1 + df$PCA.2)
data.frame(N=n, R=r, W=w, FA=razlika_FA, PCA=razlika_PCA)
}
stopCluster(cl)
rezAOVFA = aov(rezultat$FA ~ as.factor(rezultat$N) * as.factor(rezultat$R) * as.factor(rezultat$W), data=rezultat)
summFA = summary(rezAOVFA)
SST_FA = sum(summary(rezAOVFA)[[1]][2])
ETA2_FA = summary(rezAOVFA)[[1]][2] / SST_FA
pFA = summFA[[1]]["Pr(>F)"]
rezAOVPCA = aov(rezultat$PCA ~ as.factor(rezultat$N) * as.factor(rezultat$R) * as.factor(rezultat$W), data=rezultat)
mean(as.matrix(povpY))
set.seed(7)
a = rnorm(100, 3, 0.3)
x = NULL
for(i in a){
x = c(x, rnorm(10, i, 1.1))
}
X = data.frame(matrix(x, ncol = length(a)))
b1 = 0.9
eps = rnorm(length(x), 0, 0.1)
y = b1*x + eps
Y = data.frame(matrix(y, ncol = length(a)))
pa = rnorm(100, 0.4, 0.25)
pai = NULL
for(i in 1:length(pa)){
p = round(pa[i]*10)
if(p<0)
p = 0
else if(p>10)
p = 10
tmp = c(rep(1, p), rep(0, (10-p)))
tmp = sample(tmp)
pai = c(pai, tmp)
}
A = data.frame(matrix(pai, ncol = length(pa)))
N = 1000
Nh1 = N*mean(pai)
Nh2 = N-Nh1
Str1 = x[1:Nh1]
Str2 = x[(Nh1+1):length(y)]
yStr1 = y[1:(N-Nh1)]
yStr2 = y[(N-Nh1+1):length(y)] * 2
countY = data.frame("A0" = c(0,0,0), "A1" = c(0,0,0))
sumsY = data.frame("A0" = c(0,0,0), "A1" = c(0,0,0))
vzorec = data.frame("A0" = c(0,0,0), "A1" = c(0,0,0))
a0 = 1
a1 = 1
weightsAllocation = rep(NA, 1000)
xstar = NULL
for(i in 1:length(x)){
if(x[i] < 2.5){
xstar[i] = 1
if(pai[i] == 0){
vzorec[1,1] = vzorec[1,1]+1
countY[1,1] = countY[1,1]+1
sumsY[1,1] = sumsY[1,1] + yStr1[a0]
a0 = a0 + 1
weightsAllocation[i] = 1
}
else{
vzorec[1,2] = vzorec[1,2]+1
countY[1,2] = countY[1,2]+1
sumsY[1,2] = sumsY[1,2] + yStr2[a1]
a1 = a1 + 1
weightsAllocation[i] = 2
}
}
else if (x[i] >= 2.5 & x[i] < 3.5){
xstar[i] = 2
if(pai[i] == 0){
vzorec[2,1] = vzorec[2,1]+1
countY[2,1] = countY[2,1]+1
sumsY[2,1] = sumsY[2,1] + yStr1[a0]
a0 = a0 + 1
weightsAllocation[i] = 3
}
else{
vzorec[2,2] = vzorec[2,2]+1
countY[2,2] = countY[2,2]+1
sumsY[2,2] = sumsY[2,2] + yStr2[a1]
a1 = a1 + 1
weightsAllocation[i] = 4
}
}
else{
xstar[i] = 3
if(pai[i] == 0){
vzorec[3,1] = vzorec[3,1] +1
countY[3,1] = countY[3,1]+1
sumsY[3,1] = sumsY[3,1] + yStr1[a0]
a0 = a0 + 1
weightsAllocation[i] = 5
}
else{
vzorec[3,2] = vzorec[3,2] +1
countY[3,2] = countY[3,2]+1
sumsY[3,2] = sumsY[3,2] + yStr2[a1]
a1 = a1 + 1
weightsAllocation[i] = 6
}
}
}
populacija = data.frame("A0" = c(140,200,150), "A1" = c(80,320,110))
vzorecMargins = data.frame(rbind(cbind(vzorec, rowSums(vzorec)), c(colSums(vzorec), 1000)))
colnames(vzorecMargins) = c('A0', "A1", "Margins")
rownames(vzorecMargins) = c('1', "2", "3", "Margins")
kable(vzorecMargins, caption = "Vzorec")
weights1 = NULL
for(i in 1:3){
weights1[i] = (sum(populacija[i,]))/(sum(vzorec[i,]))
}
kable(weights1)
step1 = data.frame(vzorec * weights1)
step1Margins = data.frame(rbind(cbind(rbind(cbind(step1, rowSums(step1)), c(colSums(step1), NA)), c(rowSums(populacija), NA)), c(colSums(populacija), NA, 1000)))
colnames(step1Margins) = c('A0', "A1", "Margins", "Pricakovana (Populacijska) vrednost")
rownames(step1Margins) = c('1', "2", "3", "Margins", "Pricakovana (Populacijska) vrednost")
kable(step1Margins, caption = "Margine na 1. koraku")
step1 = data.frame(vzorec * weights1)
step1Margins = data.frame(rbind(cbind(rbind(cbind(step1, rowSums(step1)), c(colSums(step1), NA)), c(rowSums(populacija), NA)), c(colSums(populacija), NA, 1000)))
colnames(step1Margins) = c('A0', "A1", "Margins", "Pricakovana (Populacijska) vrednost")
rownames(step1Margins) = c('1', "2", "3", "Margins", "Pricakovana (Populacijska) vrednost")
kable(step1Margins, caption = "Margine na 1. koraku")
weights2 = c(sum(populacija[,1])/sum(step1[,1]), sum(populacija[,2])/sum(step1[,2]))
kable(weights2)
step2 = data.frame(step1[,1]*weights2[1], step1[,2]*weights2[2])
step2Margins = data.frame(rbind(cbind(rbind(cbind(step2, rowSums(step2)), c(colSums(step2), NA)), c(rowSums(populacija), NA)), c(colSums(populacija), NA, 1000)))
colnames(step2Margins) = c('A0', "A1", "Margins", "Pricakovana (Populacijska) vrednost")
rownames(step2Margins) = c('1', "2", "3", "Margins", "Pricakovana (Populacijska) vrednost")
kable(step2Margins, caption = "Margine na 2. koraku")
weights3 = NULL
for(i in 1:3){
weights3[i] = (sum(populacija[i,]))/(sum(step2[i,]))
}
kable(weights3)
step3 = data.frame(step2 * weights3)
step3Margins = data.frame(rbind(cbind(rbind(cbind(step3, rowSums(step3)), c(colSums(step3), NA)), c(rowSums(populacija), NA)), c(colSums(populacija), NA, 1000)))
colnames(step3Margins) = c('A0', "A1", "Margins", "Pricakovana (Populacijska) vrednost")
rownames(step3Margins) = c('1', "2", "3", "Margins", "Pricakovana (Populacijska) vrednost")
kable(step3Margins, caption = "Margine na 3. koraku")
finalUtezi = populacija/step3
kable(finalUtezi*1000/sum(finalUtezi))
poststratifikacijaUtezi = populacija/vzorec
kable(poststratifikacijaUtezi)
kable(povpY, caption = "Povprecje Y")
kable(povpY, caption = "Povprecje Y")
kable(poststratifikacijaUtezi*1000/sum(poststratifikacijaUtezi))
kable(abs(povpY - povpYRaking))
nUtezi = 6
uteziRaking = c(finalUtezi[,1], finalUtezi[,2])
uteziPost = c(poststratifikacijaUtezi[,1], poststratifikacijaUtezi[,2])
vwRaking = nUtezi * (1/(nUtezi-1)) * sum((uteziRaking-mean(uteziRaking))^2) # nUtezi * var(uteziRaking)
vwPost = nUtezi * var(uteziPost)
cvRaking = sqrt(vwRaking)/sum(uteziRaking) * sqrt(nUtezi)
cvPost = sqrt(vwPost)/sum(uteziPost) * sqrt(nUtezi)
VIFRaking = 1+cvRaking^2
VIFPost = 1+cvPost^2
kable(data.frame("VIF-Raking" = VIFRaking, "VIF-Poststratifikacija" = VIFPost))
relDif = data.frame(mean(as.matrix(povpYPost))/mean(as.matrix(povpY)), mean(as.matrix(povpYRaking))/mean(as.matrix(povpY)))
biasPost = mean(as.matrix(povpYPost))-mean(as.matrix(povpY))
mean(as.matrix(povpY))
setwd("C:/Users/UrbanMatjaz/OneDrive - IN516HT D.O.O/Desktop/FAKS/Linearni modeli/git/LinearniModeli/2024_25/vaja_7")
knitr::opts_chunk$set(echo = TRUE, comment = "",
fig.align = 'center',
fig.width = 5,
fig.height = 4,
warning = FALSE,
message = FALSE)
library(lme4) # mešani modeli
library(lme4) # mešani modeli
library(ggplot2) # nice plots (ggplot)
library(knitr)  # for markdown
library(dplyr) # data manipulation
library(effects) # compute marginal effects
library(lmerTest) # hypothesis testing in LMM
glas <- read.csv("politeness_data.csv", header = TRUE)
str(glas)
glas$gender <- factor(glas$gender)
glas$scenario <- factor(glas$scenario)
ggplot(glas, aes(x=subject, y=frequency)) +
geom_boxplot() +
theme_bw() +
facet_grid(.~gender, scales = "free") +
xlab("Oseba") +
ylab("Frekvenca glasu (Hz)")
